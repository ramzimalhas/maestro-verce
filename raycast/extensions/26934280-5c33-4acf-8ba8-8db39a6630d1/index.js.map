{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/utils-preference.tsx", "../src/utils-other.tsx", "../src/utils-disk-mount.tsx", "../src/utils-disk-network.tsx", "../src/utils-disk-info.tsx"],
  "sourcesContent": ["import {\n  ActionPanel,\n  Action,\n  List,\n  showToast,\n  showHUD,\n  Toast,\n  Icon,\n  Color,\n  confirmAlert,\n  openExtensionPreferences,\n  popToRoot,\n} from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { Dispatch, SetStateAction, useEffect, useRef, useState } from \"react\";\nimport { get_pref_smb_ip } from \"./utils-preference\";\nimport { delayOperation } from \"./utils-other\";\nimport { checkMountedState, findMountedName, getNetworkDrivesMounted_ } from \"./utils-disk-mount\";\nimport { getNetworkDrives } from \"./utils-disk-network\";\nimport { DiskInfo, getNetworkDrivesInfo, get_infoOfNetworkDrive } from \"./utils-disk-info\";\n\nexport default function Command() {\n  // React init hooks and variables (fetch required data)\n  const [network_drivess, set_networkDrives] = useState<string[]>([]);\n  const [network_volumes_mounted, set_networkDrivesMounted] = useState<string[]>([]);\n  const [network_drive_info, set_networkDriveInfo] = useState<DiskInfo[]>([]);\n  const [need_update, set_update] = useState<boolean>(false);\n  const [isLoading, set_isLoading] = useState<boolean>(true);\n  const [error, set_error] = useState<boolean>(false);\n  const drivesRef = useRef(network_drivess);\n  drivesRef.current = network_drivess;\n\n  // Fetch disk data from via the async helper functions\n  useEffect(() => {\n    set_isLoading(true);\n    getNetworkDrives(set_networkDrives);\n    getNetworkDrivesMounted_(set_networkDrivesMounted);\n    getNetworkDrivesInfo(set_networkDriveInfo);\n    set_update(false);\n  }, [need_update]);\n\n  // TimeOut to handle case where fetching fails\n  setTimeout(() => {\n    if (drivesRef.current.length == 0) {\n      set_isLoading(false);\n      set_error(true);\n    } else {\n      set_isLoading(false);\n    }\n  }, 5000);\n\n  // Render the list based on the data retrived\n  return (\n    <List isLoading={isLoading && network_drivess.length == 0}>\n      {error && (\n        <List.EmptyView\n          title=\"Failed to Fetch Disk Information\"\n          description=\"Check settings in preferences\"\n          icon={Icon.Warning}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Open Extension Preferences\"\n                onAction={() => {\n                  openExtensionPreferences();\n                  popToRoot();\n                }}\n              />\n            </ActionPanel>\n          }\n        />\n      )}\n      {network_drivess?.map((drive) => (\n        <DriveItem\n          key={drive}\n          vol={drive}\n          info={network_drive_info}\n          mounted_vols={network_volumes_mounted}\n          set_update={set_update}\n        />\n      ))}\n    </List>\n  );\n}\n\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nfunction DriveItem(props: {\n  vol: string;\n  mounted_vols: string[];\n  info: DiskInfo[];\n  set_update: Dispatch<SetStateAction<boolean>>;\n}) {\n  const mnt = checkMountedState(props.vol, props.mounted_vols);\n  const inf = get_infoOfNetworkDrive(props.vol, props.info) as DiskInfo;\n  let iused = \"XX\";\n  let ifree = \"XX\";\n  let capacity = \"XX%\";\n  //   let capabityInt = 0;\n  if (inf != undefined) {\n    iused = (inf.iused / 1024 ** 3).toFixed(2);\n    ifree = (inf.ifree / 1024 ** 3).toFixed(2);\n    capacity = inf.capacity;\n    // capabityInt = parseInt(capacity.split(\"%\")[0]);\n  }\n\n  return (\n    <List.Item\n      title={props.vol}\n      actions={<DriveActions vol={props.vol} mounted_vols={props.mounted_vols} set_update={props.set_update} />}\n      icon={mnt ? { source: Icon.CheckCircle, tintColor: Color.Green } : { source: Icon.Circle }}\n      accessories={\n        !mnt\n          ? []\n          : [\n              { tag: { value: `${iused} TB`, color: Color.Red }, tooltip: \"iUsed\" },\n              { tag: { value: `${ifree} TB`, color: Color.Green }, tooltip: \"iFree\" },\n              { tag: { value: `${capacity}`, color: Color.PrimaryText }, tooltip: \"Capacity\" },\n            ]\n      }\n    />\n  );\n}\n\nfunction DriveActions(props: { vol: string; mounted_vols: string[]; set_update: Dispatch<SetStateAction<boolean>> }) {\n  return (\n    <ActionPanel>\n      <ActionPanel.Section title=\"Quick Option\">\n        <Action\n          title=\"Mount/Unmount\"\n          onAction={async () => {\n            const mouned = checkMountedState(props.vol, props.mounted_vols);\n            if (!mouned) {\n              showToast({ title: \"Mounting...\", style: Toast.Style.Animated });\n              exec(`osascript -e 'mount volume \"smb://${get_pref_smb_ip()}/${props.vol}\"'`, async (err) => {\n                if (err) {\n                  showToast({ title: \"Action Failed\" });\n                }\n                await delayOperation(1000);\n                showToast({ title: `${props.vol}  Mounted` });\n                props.set_update(true);\n              });\n            } else {\n              showToast({ title: \"Unmounting...\", style: Toast.Style.Animated });\n              if (!checkMountedState(props.vol, props.mounted_vols)) {\n                showToast({ title: `${props.vol} is Already Unmounted`, style: Toast.Style.Failure });\n              } else {\n                exec(\n                  `/usr/sbin/diskutil unmount \"${findMountedName(props.vol, props.mounted_vols)}\"`,\n                  async (_err, stdout) => {\n                    await delayOperation(1000);\n                    if (!stdout.includes(\"Unmount successful\")) {\n                      showToast({ title: \"Action Failed\", style: Toast.Style.Failure });\n                    } else {\n                      showToast({ title: `${props.vol} Unmounted`, style: Toast.Style.Success });\n                    }\n                    props.set_update(true);\n                  },\n                );\n              }\n            }\n          }}\n        ></Action>\n        <Action\n          title=\"Mount and Open\"\n          onAction={async () => {\n            showToast({ title: \"Mounting...\", style: Toast.Style.Animated });\n            exec(`osascript -e 'mount volume \"smb://${get_pref_smb_ip()}/${props.vol}\"'`, async (err) => {\n              await delayOperation(1000);\n              if (err) {\n                showHUD(\"Action Failed \u26A0\uFE0F\");\n              }\n              exec(`open \"${findMountedName(props.vol, props.mounted_vols)}\"`);\n              showHUD(`Mounted  [${props.vol}]  \uD83D\uDE80\uD83C\uDF16`);\n            });\n          }}\n        ></Action>\n        <Action\n          title=\"Unmount All\"\n          shortcut={{ modifiers: [\"ctrl\", \"shift\"], key: \"x\" }}\n          onAction={async () => {\n            if (\n              await confirmAlert({\n                icon: Icon.AlarmRinging,\n                title: `Are you sure you want to \\n \"Unmount All Drives\" ?`,\n              })\n            ) {\n              showToast({ title: \"Unmounting All...\", style: Toast.Style.Animated });\n              if (!(props.mounted_vols == undefined || props.mounted_vols.length == 0)) {\n                await delayOperation(1000);\n                props.mounted_vols.forEach((_vol_) => {\n                  exec(`/usr/sbin/diskutil unmount \"${findMountedName(_vol_, props.mounted_vols)}\"`, async (err) => {\n                    if (err) {\n                      showToast({ title: \"Action Failed\", style: Toast.Style.Failure });\n                    }\n                    showHUD(\"Unmounted All  \uD83E\uDE82\uD83C\uDF0D\");\n                    props.set_update(true);\n                  });\n                });\n              } else {\n                await delayOperation(1000);\n                showHUD(\"Unmounted All  \uD83E\uDE82\uD83C\uDF0D\");\n              }\n            }\n          }}\n        ></Action>\n      </ActionPanel.Section>\n      <ActionPanel.Section title=\"Specific Option\">\n        <Action\n          title=\"Mount\"\n          shortcut={{ modifiers: [\"cmd\"], key: \"o\" }}\n          onAction={async () => {\n            showToast({ title: \"Mounting...\", style: Toast.Style.Animated });\n            await delayOperation(1000);\n            exec(`osascript -e 'mount volume \"smb://${get_pref_smb_ip()}/${props.vol}\"'`, async (err) => {\n              if (err) {\n                showToast({ title: \"Action Failed\" });\n              }\n              showToast({ title: `${props.vol} Mounted` });\n              props.set_update(true);\n            });\n          }}\n        ></Action>\n        <Action\n          title=\"Unmount\"\n          shortcut={{ modifiers: [\"ctrl\"], key: \"x\" }}\n          onAction={async () => {\n            showToast({ title: \"Unmounting...\", style: Toast.Style.Animated });\n            await delayOperation(1000);\n            if (!props.mounted_vols.includes(props.vol)) {\n              showToast({ title: `${props.vol} is Already Unmounted`, style: Toast.Style.Failure });\n            } else {\n              exec(\n                `/usr/sbin/diskutil unmount \"${findMountedName(props.vol, props.mounted_vols)}\"`,\n                async (_err, stdout) => {\n                  if (!stdout.includes(\"Unmount successful\")) {\n                    showToast({ title: \"Action Failed\", style: Toast.Style.Failure });\n                  } else {\n                    showToast({ title: `${props.vol} Unmounted`, style: Toast.Style.Success });\n                  }\n                  props.set_update(true);\n                },\n              );\n            }\n          }}\n        ></Action>\n      </ActionPanel.Section>\n    </ActionPanel>\n  );\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\nexport function get_pref_smb_ip(): string {\n  const prefernce = getPreferenceValues<Preferences>();\n  return prefernce.pref_smb_ip;\n}\nexport function get_pref_smb_usr(): string {\n  const prefernce = getPreferenceValues<Preferences>();\n  return prefernce.pref_smb_usr;\n}\nexport function get_pref_smb_pwd(): string {\n  const prefernce = getPreferenceValues<Preferences>();\n  return prefernce.pref_smb_pwd;\n}\n", "export function delayOperation(milliseconds: number) {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n", "import { Dispatch, SetStateAction } from \"react\";\nimport { get_pref_smb_ip } from \"./utils-preference\";\nimport { exec } from \"child_process\";\n\nexport function checkMountedState(_vol_: string, mounted_vols: string[]): boolean {\n  let rtn_match = false;\n  mounted_vols.forEach((mounted_vol) => {\n    if (mounted_vol.split(\"-\")[0] == _vol_) {\n      rtn_match = true;\n    }\n  });\n  return rtn_match;\n}\n\nexport function findMountedName(_vol_: string, mounted_vols: string[]): string {\n  let rtn_match = \"\";\n  mounted_vols.forEach((mounted_vol) => {\n    if (mounted_vol.split(\"-\")[0] == _vol_) {\n      rtn_match = \"/Volumes/\" + mounted_vol;\n    }\n  });\n  return rtn_match;\n}\n\nexport async function getNetworkDrivesMounted_(set_data: Dispatch<SetStateAction<string[]>>) {\n  const _filesystem_ = \"@\" + get_pref_smb_ip();\n  exec(`/sbin/mount | /usr/bin/grep --context=0 ${_filesystem_}`, (_err, stdout: string) => {\n    const mounted_networkDrives_strline = stdout.split(\"\\n\").filter((line: string) => {\n      return line.includes(get_pref_smb_ip());\n    });\n    const mounted_networkDrives = mounted_networkDrives_strline.map((item: string) => {\n      return item.split(\"on /Volumes/\")[1].split(\" (\")[0];\n    });\n    set_data(mounted_networkDrives);\n  });\n}\n", "import { exec } from \"child_process\";\nimport { get_pref_smb_ip, get_pref_smb_pwd, get_pref_smb_usr } from \"./utils-preference\";\nimport { confirmAlert, Icon } from \"@raycast/api\";\nimport { Dispatch, SetStateAction } from \"react\";\n\nexport async function getNetworkDrives(set_data: Dispatch<SetStateAction<string[]>>) {\n  const ip: string = get_pref_smb_ip();\n  const usr: string = get_pref_smb_usr();\n  const pwd: string = get_pref_smb_pwd();\n  exec(\n    `/usr/bin/smbutil -v view -f //${usr}:${pwd}@${ip} | awk '/Disk/ {print $1}' FS=\"  \"`,\n    async (err, stdout, stderr) => {\n      if (err) {\n        // Prompt user to install \"samba\" if \"smbclient\" command is not found\n        const emptyArray: string[] = [];\n        set_data(emptyArray);\n        if (stderr.includes(`/opt/homebrew/bin/smbclient: No such file or directory`)) {\n          await confirmAlert({\n            title: \"You have not installed samba\",\n            icon: Icon.Warning,\n            message: \"Please install it via `brew install samba`.\",\n          });\n        }\n      } else {\n        try {\n          // Process stdout to array of network drive\n          const stdout_drive: string[] = [];\n          const stdout_strlines = stdout.split(\"\\n\");\n          stdout_strlines.forEach((line) => {\n            if (line.length != 0) {\n              stdout_drive.push(line);\n            }\n          });\n          set_data(stdout_drive);\n        } catch (err) {\n          set_data([]);\n        }\n      }\n    },\n  );\n}\n", "import { exec } from \"child_process\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { get_pref_smb_ip } from \"./utils-preference\";\n\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nexport type DiskInfo = {\n  filesystem: string;\n  \"1G-blocks\": number;\n  used: number;\n  available: number;\n  capacity: string;\n  iused: number;\n  ifree: number;\n  percentIused: string;\n  mountedOn: string;\n};\n\nfunction parseDiskUsage(output: string): DiskInfo[] {\n  const lines = output.split(\"\\n\");\n  lines.pop(); // Remove the last empty line if present\n  const data = lines.map((line) => {\n    const columns = line.trim().split(/\\s+/);\n    return {\n      filesystem: decodeURI(columns[0]),\n      \"1G-blocks\": parseInt(columns[1], 10),\n      used: parseInt(columns[2], 10),\n      available: parseInt(columns[3], 10),\n      capacity: columns[4],\n      iused: parseInt(columns[5], 10),\n      ifree: parseInt(columns[6], 10),\n      percentIused: columns[7],\n      mountedOn: columns.slice(8).join(\" \"),\n    } as DiskInfo;\n  });\n  return data;\n}\n\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nexport type MountedDisk_Mapping = {\n  network_source: string; //e.g. \"//xxxx.yy@example.com/drive_name\"\n  mounted_location: string; //e.g. \"/Volumes/drive_name-1\"\n};\n\nfunction parseNetworkDiskMount(stdout: string): MountedDisk_Mapping[] {\n  const rtn_mounteddisk_mapping: MountedDisk_Mapping[] = [];\n  const stdout_decode = decodeURI(stdout);\n  const stdout_decode_lines = stdout_decode.split(\"\\n\");\n  stdout_decode_lines.forEach((line) => {\n    if (line.length != 0) {\n      const _src = line.split(\" on \")[0];\n      const _loc = line.split(\" on \")[1].split(\" (\")[0];\n      rtn_mounteddisk_mapping.push({ network_source: _src, mounted_location: _loc });\n    }\n  });\n  return rtn_mounteddisk_mapping;\n}\n\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\nexport async function getNetworkDrivesInfo(set_data: Dispatch<SetStateAction<DiskInfo[]>>) {\n  const _filesystem_ = \"@\" + get_pref_smb_ip();\n  exec(`/sbin/mount | /usr/bin/grep --context=0 ${_filesystem_}`, (_err, stdout: string) => {\n    const parsed_data_1 = parseNetworkDiskMount(stdout);\n    exec(`/bin/df -c -g | /usr/bin/grep --context=0 \"${_filesystem_}\"`, (_err, stdout) => {\n      const parsed_data_2 = parseDiskUsage(stdout);\n      parsed_data_2.forEach((item) => {\n        const mounted_locations = parsed_data_1.map((i) => {\n          return i.mounted_location;\n        });\n        const network_sources = parsed_data_1.map((i) => {\n          return i.network_source;\n        });\n        const index = network_sources.indexOf(item.filesystem);\n        const mounted_loc = mounted_locations[index];\n        item.mountedOn = mounted_loc;\n      });\n      set_data(parsed_data_2);\n    });\n  });\n}\n\nexport function get_infoOfNetworkDrive(_network_name_: string, _disk_infos_: DiskInfo[]): DiskInfo | undefined {\n  for (let i = 0; i < _disk_infos_.length; i++) {\n    const disk_info = _disk_infos_[i];\n    // console.log(disk_info.filesystem, \"|\", _network_name_);\n    if (disk_info.filesystem.includes(_network_name_)) {\n      return disk_info;\n    }\n  }\n  return undefined;\n}\n\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_react", "import_api", "get_pref_smb_ip", "get_pref_smb_usr", "get_pref_smb_pwd", "delayOperation", "milliseconds", "resolve", "import_child_process", "checkMountedState", "_vol_", "mounted_vols", "rtn_match", "mounted_vol", "findMountedName", "getNetworkDrivesMounted_", "set_data", "_filesystem_", "get_pref_smb_ip", "_err", "stdout", "mounted_networkDrives", "line", "item", "import_child_process", "import_api", "getNetworkDrives", "set_data", "ip", "get_pref_smb_ip", "usr", "get_pref_smb_usr", "pwd", "get_pref_smb_pwd", "err", "stdout", "stderr", "stdout_drive", "line", "import_child_process", "parseDiskUsage", "output", "lines", "line", "columns", "parseNetworkDiskMount", "stdout", "rtn_mounteddisk_mapping", "_src", "_loc", "getNetworkDrivesInfo", "set_data", "_filesystem_", "get_pref_smb_ip", "_err", "parsed_data_1", "parsed_data_2", "item", "mounted_locations", "i", "index", "mounted_loc", "get_infoOfNetworkDrive", "_network_name_", "_disk_infos_", "disk_info", "import_jsx_runtime", "Command", "network_drivess", "set_networkDrives", "network_volumes_mounted", "set_networkDrivesMounted", "network_drive_info", "set_networkDriveInfo", "need_update", "set_update", "isLoading", "set_isLoading", "error", "set_error", "drivesRef", "getNetworkDrives", "getNetworkDrivesMounted_", "getNetworkDrivesInfo", "drive", "DriveItem", "props", "mnt", "checkMountedState", "inf", "get_infoOfNetworkDrive", "iused", "ifree", "capacity", "DriveActions", "findMountedName", "_err", "stdout", "delayOperation", "get_pref_smb_ip", "err", "_vol_"]
}
