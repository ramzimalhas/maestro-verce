{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { confirmAlert, showHUD } from \"@raycast/api\";\nimport { SpawnSyncReturns, execSync } from \"node:child_process\";\n\nconst isSpawnReturn = (e: unknown): e is SpawnSyncReturns<Buffer> => {\n  return typeof e === \"object\" && e !== null && \"status\" in e && \"stdout\" in e && \"stderr\" in e;\n};\n\nconst commands = {\n  mDNSResponder: \"sudo /usr/bin/killall -HUP mDNSResponder\",\n  dscacheutil: \"sudo /usr/bin/dscacheutil -flushcache\",\n  mdnsflushcache: \"sudo /usr/bin/discoveryutil mdnsflushcache\",\n} as const satisfies Record<string, string>;\n\nexport default async function main() {\n  const osVersion = execSync(\"sw_vers -productVersion\").toString().trim();\n\n  const runCommands: (keyof typeof commands)[] = [];\n\n  if (osVersion.match(/^1[1-4]/)) {\n    console.log(`OS Version: ${osVersion} parsed as 11-14`);\n    runCommands.push(\"dscacheutil\", \"mDNSResponder\");\n  } else if (osVersion.match(/^10\\.([7-9]|1[1-4])/) || osVersion.match(/^10\\.10\\.[4-5]/)) {\n    console.log(`OS Version: ${osVersion} parsed as 10.7-9, 10.10.4-5, 10.11-14`);\n    runCommands.push(\"mDNSResponder\");\n  } else if (osVersion.match(/^10\\.10\\.[0-3]/)) {\n    console.log(`OS Version: ${osVersion} parsed as 10.10.0-3`);\n    runCommands.push(\"mdnsflushcache\");\n  } else if (osVersion.startsWith(\"10.6\")) {\n    console.log(`OS Version: ${osVersion} parsed as 10.6`);\n    runCommands.push(\"dscacheutil\");\n  } else {\n    const flush = await confirmAlert({\n      title: `OS Version ${osVersion} is not supported.`,\n      message: \"Would you like to try flushing the DNS cache anyway?\",\n      primaryAction: {\n        title: \"Flush DNS Cache\",\n      },\n      dismissAction: {\n        title: \"Cancel\",\n      },\n    });\n    if (!flush) return;\n    runCommands.push(\"dscacheutil\", \"mDNSResponder\");\n  }\n\n  const command = runCommands.map((key) => commands[key]).join(\"; \");\n\n  const osaCommand = `osascript -e 'do shell script \"${command}\" with administrator privileges'`;\n\n  console.log(`Running command: ${osaCommand}`);\n\n  await showHUD(\"Administrator Privileges Required\");\n  try {\n    execSync(osaCommand, { shell: \"/bin/bash\" });\n    await showHUD(\"DNS Cache Flushed\");\n  } catch (e) {\n    if (isSpawnReturn(e)) {\n      console.error(`Command exited with status ${e.status}`);\n      console.error(`stdout: ${e.stdout.toString()}`);\n      console.error(`stderr: ${e.stderr.toString()}`);\n    } else {\n      console.error(e);\n    }\n    await showHUD(\"Error Flushing DNS Cache\");\n  }\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAsC,wBACtCC,EAA2C,8BAErCC,EAAiBC,GACd,OAAOA,GAAM,UAAYA,IAAM,MAAQ,WAAYA,GAAK,WAAYA,GAAK,WAAYA,EAGxFC,EAAW,CACf,cAAe,2CACf,YAAa,wCACb,eAAgB,4CAClB,EAEA,eAAON,GAA8B,CACnC,IAAMO,KAAY,YAAS,yBAAyB,EAAE,SAAS,EAAE,KAAK,EAEhEC,EAAyC,CAAC,EAEhD,GAAID,EAAU,MAAM,SAAS,EAC3B,QAAQ,IAAI,eAAeA,mBAA2B,EACtDC,EAAY,KAAK,cAAe,eAAe,UACtCD,EAAU,MAAM,qBAAqB,GAAKA,EAAU,MAAM,gBAAgB,EACnF,QAAQ,IAAI,eAAeA,yCAAiD,EAC5EC,EAAY,KAAK,eAAe,UACvBD,EAAU,MAAM,gBAAgB,EACzC,QAAQ,IAAI,eAAeA,uBAA+B,EAC1DC,EAAY,KAAK,gBAAgB,UACxBD,EAAU,WAAW,MAAM,EACpC,QAAQ,IAAI,eAAeA,kBAA0B,EACrDC,EAAY,KAAK,aAAa,MACzB,CAWL,GAAI,CAVU,QAAM,gBAAa,CAC/B,MAAO,cAAcD,sBACrB,QAAS,uDACT,cAAe,CACb,MAAO,iBACT,EACA,cAAe,CACb,MAAO,QACT,CACF,CAAC,EACW,OACZC,EAAY,KAAK,cAAe,eAAe,EAKjD,IAAMC,EAAa,kCAFHD,EAAY,IAAKE,GAAQJ,EAASI,CAAG,CAAC,EAAE,KAAK,IAAI,oCAIjE,QAAQ,IAAI,oBAAoBD,GAAY,EAE5C,QAAM,WAAQ,mCAAmC,EACjD,GAAI,IACF,YAASA,EAAY,CAAE,MAAO,WAAY,CAAC,EAC3C,QAAM,WAAQ,mBAAmB,CACnC,OAASJ,EAAP,CACID,EAAcC,CAAC,GACjB,QAAQ,MAAM,8BAA8BA,EAAE,QAAQ,EACtD,QAAQ,MAAM,WAAWA,EAAE,OAAO,SAAS,GAAG,EAC9C,QAAQ,MAAM,WAAWA,EAAE,OAAO,SAAS,GAAG,GAE9C,QAAQ,MAAMA,CAAC,EAEjB,QAAM,WAAQ,0BAA0B,CAC1C,CACF",
  "names": ["src_exports", "__export", "main", "__toCommonJS", "import_api", "import_node_child_process", "isSpawnReturn", "e", "commands", "osVersion", "runCommands", "osaCommand", "key"]
}
