{
  "version": 3,
  "sources": ["../src/createFile.tsx", "../src/utils.ts"],
  "sourcesContent": ["import { Toast, showToast, getPreferenceValues, LaunchProps } from \"@raycast/api\";\nimport { runAppleScript } from \"./utils\";\n\ninterface Preferences {\n  extensions: string;\n}\n\nexport default async (props: LaunchProps<{ arguments: { filename: string } }>) => {\n  const autoOpen: Array<string> = getPreferenceValues<Preferences>().extensions?.trim().split(\",\");\n\n  const filename: string = props.arguments.filename;\n  const extension: string = filename?.split(\".\").pop() || \"\";\n\n  let script = `\n          if application \"Finder\" is not running then\n  \t        return \"Finder not running\"\n          end if\n\n          tell application \"Finder\"\n            set pathList to (quoted form of POSIX path of (folder of the front window as alias))\n\n            if exists (POSIX path of (folder of the front window as alias)) & \"${filename}\" as POSIX file then\n\t\t          return \"Already exists\"\n\t          end if\n          end tell\n\n          set command to \"touch \" & pathList & \"${filename}\"\n          do shell script command\n      `;\n\n  if (autoOpen !== undefined && (autoOpen.includes(\"*\") || autoOpen.includes(extension))) {\n    script += `\n      set command to \"open \" & pathList & \"${filename}\"\n      do shell script command\n    `;\n  }\n\n  try {\n    const result = (await runAppleScript(script)).trim();\n\n    if (result == \"Already exists\" || result == \"Finder not running\") {\n      await showToast(Toast.Style.Failure, \"File creation error:\", result);\n    } else {\n      await showToast(Toast.Style.Success, \"Done\", result);\n    }\n  } catch (err) {\n    await showToast(Toast.Style.Failure, \"Something went wrong\");\n  }\n};\n", "import { spawnSync } from \"node:child_process\";\n\nexport async function runAppleScript(script: string) {\n  if (process.platform !== \"darwin\") {\n    throw new Error(\"macOS only\");\n  }\n\n  const locale = process.env.LC_ALL;\n  delete process.env.LC_ALL;\n  const { stdout } = spawnSync(\"osascript\", [\"-e\", script]);\n  process.env.LC_ALL = locale;\n  return stdout.toString();\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAmE,wBCAnE,IAAAC,EAA0B,8BAE1B,eAAsBC,EAAeC,EAAgB,CACnD,GAAI,QAAQ,WAAa,SACvB,MAAM,IAAI,MAAM,YAAY,EAG9B,IAAMC,EAAS,QAAQ,IAAI,OAC3B,OAAO,QAAQ,IAAI,OACnB,GAAM,CAAE,OAAAC,CAAO,KAAI,aAAU,YAAa,CAAC,KAAMF,CAAM,CAAC,EACxD,eAAQ,IAAI,OAASC,EACdC,EAAO,SAAS,CACzB,CDLA,IAAOC,EAAQ,MAAOC,GAA4D,CAChF,IAAMC,KAA0B,uBAAiC,EAAE,YAAY,KAAK,EAAE,MAAM,GAAG,EAEzFC,EAAmBF,EAAM,UAAU,SACnCG,EAAoBD,GAAU,MAAM,GAAG,EAAE,IAAI,GAAK,GAEpDE,EAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAQkEF;AAAA;AAAA;AAAA;AAAA;AAAA,kDAK/BA;AAAA;AAAA,QAI5CD,IAAa,SAAcA,EAAS,SAAS,GAAG,GAAKA,EAAS,SAASE,CAAS,KAClFC,GAAU;AAAA,6CAC+BF;AAAA;AAAA,OAK3C,GAAI,CACF,IAAMG,GAAU,MAAMC,EAAeF,CAAM,GAAG,KAAK,EAE/CC,GAAU,kBAAoBA,GAAU,qBAC1C,QAAM,aAAU,QAAM,MAAM,QAAS,uBAAwBA,CAAM,EAEnE,QAAM,aAAU,QAAM,MAAM,QAAS,OAAQA,CAAM,CAEvD,MAAE,CACA,QAAM,aAAU,QAAM,MAAM,QAAS,sBAAsB,CAC7D,CACF",
  "names": ["createFile_exports", "__export", "createFile_default", "__toCommonJS", "import_api", "import_node_child_process", "runAppleScript", "script", "locale", "stdout", "createFile_default", "props", "autoOpen", "filename", "extension", "script", "result", "runAppleScript"]
}
