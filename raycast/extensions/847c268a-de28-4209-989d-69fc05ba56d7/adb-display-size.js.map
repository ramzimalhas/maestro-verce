{
  "version": 3,
  "sources": ["../node_modules/parse-passwd/index.js", "../node_modules/homedir-polyfill/polyfill.js", "../node_modules/homedir-polyfill/index.js", "../node_modules/expand-tilde/index.js", "../src/adb-display-size.ts", "../src/utils.ts"],
  "sourcesContent": ["'use strict';\n\n/**\n * Parse the content of a passwd file into a list of user objects.\n * This function ignores blank lines and comments.\n *\n * ```js\n * // assuming '/etc/passwd' contains:\n * // doowb:*:123:123:Brian Woodward:/Users/doowb:/bin/bash\n * console.log(parse(fs.readFileSync('/etc/passwd', 'utf8')));\n *\n * //=> [\n * //=>   {\n * //=>     username: 'doowb',\n * //=>     password: '*',\n * //=>     uid: '123',\n * //=>     gid: '123',\n * //=>     gecos: 'Brian Woodward',\n * //=>     homedir: '/Users/doowb',\n * //=>     shell: '/bin/bash'\n * //=>   }\n * //=> ]\n * ```\n * @param  {String} `content` Content of a passwd file to parse.\n * @return {Array} Array of user objects parsed from the content.\n * @api public\n */\n\nmodule.exports = function(content) {\n  if (typeof content !== 'string') {\n    throw new Error('expected a string');\n  }\n  return content\n    .split('\\n')\n    .map(user)\n    .filter(Boolean);\n};\n\nfunction user(line, i) {\n  if (!line || !line.length || line.charAt(0) === '#') {\n    return null;\n  }\n\n  // see https://en.wikipedia.org/wiki/Passwd for field descriptions\n  var fields = line.split(':');\n  return {\n    username: fields[0],\n    password: fields[1],\n    uid: fields[2],\n    gid: fields[3],\n    // see https://en.wikipedia.org/wiki/Gecos_field for GECOS field descriptions\n    gecos: fields[4],\n    homedir: fields[5],\n    shell: fields[6]\n  };\n}\n", "'use strict';\n\nvar fs = require('fs');\nvar parse = require('parse-passwd');\n\nfunction homedir() {\n  // The following logic is from looking at logic used in the different platform\n  // versions of the uv_os_homedir function found in https://github.com/libuv/libuv\n  // This is the function used in modern versions of node.js\n\n  if (process.platform === 'win32') {\n    // check the USERPROFILE first\n    if (process.env.USERPROFILE) {\n      return process.env.USERPROFILE;\n    }\n\n    // check HOMEDRIVE and HOMEPATH\n    if (process.env.HOMEDRIVE && process.env.HOMEPATH) {\n      return process.env.HOMEDRIVE + process.env.HOMEPATH;\n    }\n\n    // fallback to HOME\n    if (process.env.HOME) {\n      return process.env.HOME;\n    }\n\n    return null;\n  }\n\n  // check HOME environment variable first\n  if (process.env.HOME) {\n    return process.env.HOME;\n  }\n\n  // on linux platforms (including OSX) find the current user and get their homedir from the /etc/passwd file\n  var passwd = tryReadFileSync('/etc/passwd');\n  var home = find(parse(passwd), getuid());\n  if (home) {\n    return home;\n  }\n\n  // fallback to using user environment variables\n  var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;\n\n  if (!user) {\n    return null;\n  }\n\n  if (process.platform === 'darwin') {\n    return '/Users/' + user;\n  }\n\n  return '/home/' + user;\n}\n\nfunction find(arr, uid) {\n  var len = arr.length;\n  for (var i = 0; i < len; i++) {\n    if (+arr[i].uid === uid) {\n      return arr[i].homedir;\n    }\n  }\n}\n\nfunction getuid() {\n  if (typeof process.geteuid === 'function') {\n    return process.geteuid();\n  }\n  return process.getuid();\n}\n\nfunction tryReadFileSync(fp) {\n  try {\n    return fs.readFileSync(fp, 'utf8');\n  } catch (err) {\n    return '';\n  }\n}\n\nmodule.exports = homedir;\n\n", "'use strict';\n\nvar os = require('os');\nif (typeof os.homedir !== 'undefined') {\n  module.exports = os.homedir;\n} else {\n  module.exports = require('./polyfill.js');\n}\n\n", "/*!\n * expand-tilde <https://github.com/jonschlinkert/expand-tilde>\n *\n * Copyright (c) 2015 Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\nvar homedir = require('homedir-polyfill');\nvar path = require('path');\n\nmodule.exports = function expandTilde(filepath) {\n  var home = homedir();\n\n  if (filepath.charCodeAt(0) === 126 /* ~ */) {\n    if (filepath.charCodeAt(1) === 43 /* + */) {\n      return path.join(process.cwd(), filepath.slice(2));\n    }\n    return home ? path.join(home, filepath.slice(1)) : filepath;\n  }\n\n  return filepath;\n};\n", "import { LaunchProps, showHUD } from \"@raycast/api\";\nimport { execSync } from \"child_process\";\nimport { checkAdbDeviceExists } from \"./utils\";\n\ninterface AdbDisplayDensityArguments {\n  factor: string;\n}\n\nexport default async function displayDensity(props: LaunchProps<{ arguments: AdbDisplayDensityArguments }>) {\n  let adbDir: string;\n  try {\n    adbDir = await checkAdbDeviceExists();\n  } catch (e) {\n    await showHUD(`${e}`);\n    return;\n  }\n  const factor = Number(props.arguments.factor);\n  const currentDensities = execSync(`${adbDir} shell wm density`).toString();\n  let defaultDensity = 0;\n  const densitiesArray = currentDensities.split(\"\\n\").slice(0, -1);\n  densitiesArray.forEach((density) => {\n    if (density.includes(\"Physical density\")) {\n      defaultDensity = Number(density.split(\": \")[1]);\n    }\n  });\n  let density;\n  if (factor == 1.0) {\n    density = defaultDensity;\n  } else if (factor == 2) {\n    density = defaultDensity + 50;\n  } else if (factor >= 3) {\n    density = defaultDensity + 100;\n  } else if (factor <= 0.5) {\n    density = 374;\n  } else {\n    density = factor;\n  }\n\n  await showHUD(`\uD83D\uDD0E Setting display density to ${density}`);\n  execSync(`${adbDir} shell wm density ${density}`);\n}\n", "import * as fs from \"fs\";\nimport { execSync } from \"child_process\";\nimport { Cache, getPreferenceValues } from \"@raycast/api\";\nimport expandTilde from \"expand-tilde\";\n\nexport async function checkAdbExists() {\n  const sdk = getPreferenceValues().androidSDK;\n  const sdkPath = sdk.replace(\"~\", expandTilde(\"~\"));\n  const adb = `${sdkPath}/platform-tools/adb`;\n\n  if (!fs.existsSync(adb)) {\n    throw new Error(`\u2757\uFE0FADB not found here: ${adb}`);\n  } else {\n    return adb;\n  }\n}\n\nexport async function checkAdbDeviceExists() {\n  const adb = await checkAdbExists();\n  const device = execSync(`${adb} devices`).toString().trim().split(\"\\n\");\n  if (device.length == 1) {\n    throw new Error(`\u2757No device seem to be connected.`);\n  }\n  return `${adb} -s ${device[1].split(\"\\t\")[0]}`;\n}\n\nexport function getAppIdFromParamsOrCache(paramAppId: string | undefined): string | undefined {\n  const cache = new Cache();\n  const cacheAppId = cache.get(\"appId\");\n  let appId: string | undefined;\n  if (paramAppId != undefined && paramAppId.length > 0) {\n    appId = paramAppId;\n  } else if (cacheAppId?.length ?? 0 > 0) {\n    appId = cacheAppId;\n  } else {\n    appId = undefined;\n  }\n  return appId;\n}\n\nexport function saveAppIdInCache(appId: string) {\n  const cache = new Cache();\n  cache.set(\"appId\", appId);\n}\n\nexport function delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],
  "mappings": "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",
  "names": ["require_parse_passwd", "__commonJSMin", "exports", "module", "content", "user", "line", "i", "fields", "require_polyfill", "__commonJSMin", "exports", "module", "fs", "parse", "homedir", "passwd", "tryReadFileSync", "home", "find", "getuid", "user", "arr", "uid", "len", "i", "fp", "require_homedir_polyfill", "__commonJSMin", "exports", "module", "os", "require_expand_tilde", "__commonJSMin", "exports", "module", "homedir", "path", "filepath", "home", "adb_display_size_exports", "__export", "displayDensity", "__toCommonJS", "import_api", "import_child_process", "fs", "import_child_process", "import_api", "import_expand_tilde", "checkAdbExists", "adb", "expandTilde", "checkAdbDeviceExists", "device", "displayDensity", "props", "adbDir", "checkAdbDeviceExists", "e", "factor", "currentDensities", "defaultDensity", "density"]
}
