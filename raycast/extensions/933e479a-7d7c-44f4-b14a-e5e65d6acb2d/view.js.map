{
  "version": 3,
  "sources": ["../src/view.tsx"],
  "sourcesContent": ["import { List, Icon, ListItem, ActionPanel, showToast, LaunchType, Clipboard, launchCommand } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { environment } from \"@raycast/api\";\n\nlaunchCommand({ name: \"menu\", type: LaunchType.UserInitiated });\n\nconst REMEMBERING_FILE = path.join(environment.supportPath, \"remembering.csv\");\n\nlet fileExists = false;\ntry {\n  fs.accessSync(REMEMBERING_FILE);\n  fileExists = true;\n} catch (error) {\n  console.log(\"File does not exist. Creating a new file...\");\n}\n\nlet content = \"\";\nif (fileExists) {\n  // Read the contents of the existing file\n  content = fs.readFileSync(REMEMBERING_FILE, \"utf-8\");\n}\n\n// Split the CSV into lines\nconst lines = content.split(\"\\n\");\n\n// Filter out empty lines\nconst nonEmptyLines = lines.filter((line) => line.trim() !== \"\");\n\n// Join the remaining lines back together\nconst updatedCsv = nonEmptyLines.join(\"\\n\");\n\nfs.writeFileSync(REMEMBERING_FILE, updatedCsv);\n\ntype RememberedItem = {\n  expirationDate: Date;\n  content: string;\n};\n\nfunction readRememberedItems(): RememberedItem[] {\n  const now = new Date();\n\n  try {\n    const fileContents = fs.readFileSync(REMEMBERING_FILE, \"utf8\");\n    const lines = fileContents.trim().split(\"\\n\");\n    const validLines = lines.filter((line) => {\n      const [dateString, testlol] = line.split(\",\");\n      const delimiter = \"||&|\"; // Remove unnecessary escape characters\n      const content = testlol.replace(delimiter, \",\");\n\n      const expirationDate = new Date(dateString);\n      return expirationDate > now;\n    });\n    const newFileContents = validLines.join(\"\\n\") + \"\\n\\n\";\n    fs.writeFileSync(REMEMBERING_FILE, newFileContents);\n\n    return validLines.map((line) => {\n      const [dateString, testlol] = line.split(\",\");\n      const delimiter = \"||&|\"; // Remove unnecessary escape characters\n      const content = testlol.replace(delimiter, \",\");\n      return {\n        expirationDate: new Date(dateString),\n        content,\n      };\n    });\n  } catch (error) {\n    return [];\n  }\n}\n\nfunction filterValidItems(items: RememberedItem[], query: string): RememberedItem[] {\n  const now = new Date();\n  return items.filter((item) => {\n    if (query.length === 0) {\n      return item.expirationDate > now;\n    } else {\n      return item.expirationDate > now && item.content.toLowerCase().includes(query.toLowerCase());\n    }\n  });\n}\n\nfunction getExpirationString(expirationDate: Date): string {\n  const now = new Date();\n  const diff = expirationDate.getTime() - now.getTime();\n  const year = 365 * 24 * 60 * 60 * 1000;\n  const month = 30 * 24 * 60 * 60 * 1000;\n  const day = 24 * 60 * 60 * 1000;\n  const hour = 60 * 60 * 1000;\n  const minute = 60 * 1000;\n  const second = 1000;\n\n  if (diff > 10 * year) {\n    return \"Forever\";\n  } else if (diff <= 0) {\n    return \"Expired\";\n  } else if (diff >= year) {\n    const years = Math.floor(diff / year);\n    const remaining = diff % year;\n    const months = Math.floor(remaining / month);\n    if (years === 1) {\n      return `Expires in ${years} year and ${months} months`;\n    } else {\n      return `Expires in ${years} years and ${months} months`;\n    }\n  } else if (diff >= month) {\n    const months = Math.floor(diff / month);\n    const remaining = diff % month;\n    const days = Math.floor(remaining / day);\n    if (months === 1) {\n      return `Expires in ${months} month and ${days} days`;\n    } else {\n      return `Expires in ${months} months and ${days} days`;\n    }\n  } else if (diff >= day) {\n    const days = Math.floor(diff / day);\n    const remaining = diff % day;\n    const hours = Math.floor(remaining / hour);\n    if (days === 1) {\n      return `Expires in ${days} day and ${hours} hours`;\n    } else {\n      return `Expires in ${days} days and ${hours} hours`;\n    }\n  } else if (diff >= hour) {\n    const hours = Math.floor(diff / hour);\n    const remaining = diff % hour;\n    const minutes = Math.floor(remaining / minute);\n    if (hours === 1) {\n      return `Expires in ${hours} hour and ${minutes} minutes`;\n    } else {\n      return `Expires in ${hours} hours and ${minutes} minutes`;\n    }\n  } else if (diff >= minute) {\n    const minutes = Math.floor(diff / minute);\n    const remaining = diff % minute;\n    const seconds = Math.floor(remaining / second);\n    if (minutes === 1) {\n      return `Expires in ${minutes} minute and ${seconds} seconds`;\n    } else {\n      return `Expires in ${minutes} minutes and ${seconds} seconds`;\n    }\n  } else {\n    const seconds = Math.floor(diff / second);\n    return `Expires in ${seconds} seconds`;\n  }\n}\n\nexport default function Command() {\n  const [items, setItems] = useState(filterValidItems(readRememberedItems(), \"\"));\n  const [query, setQuery] = useState(\"\");\n\n  const deleteItem = (index: number) => {\n    const filePath = path.join(environment.supportPath, \"remembering.csv\");\n\n    // Read the contents of the CSV file\n    const fileContents = fs.readFileSync(filePath, \"utf8\");\n\n    // Split the file contents into an array of lines\n    const lines = fileContents.trim().split(\"\\n\");\n\n    // Remove the line at the specified index\n    const deletedLine = lines.splice(index, 1)[0];\n\n    // Join the remaining lines back into a single string\n    const newFileContents = lines.join(\"\\n\");\n\n    // Write the updated contents back to the file\n    fs.writeFileSync(filePath, newFileContents);\n\n    // Update the state by filtering the items array to exclude the deleted item\n    const newItems = items.filter((_, i) => i !== index);\n    setItems(newItems);\n\n    showToast({ title: \"Deleted That Item!\" });\n    launchCommand({ name: \"menu\", type: LaunchType.UserInitiated });\n  };\n\n  const handleSearch = (query: string) => {\n    setQuery(query);\n    setItems(filterValidItems(readRememberedItems(), query));\n  };\n\n  launchCommand({ name: \"menu\", type: LaunchType.UserInitiated });\n\n  return (\n    <List searchBarPlaceholder=\"Search remembered items\" onSearchTextChange={handleSearch}>\n      {items.length > 0 ? (\n        items.map((item, index) => (\n          <ListItem\n            key={index}\n            title={item.content}\n            subtitle={getExpirationString(item.expirationDate)}\n            actions={\n              <ActionPanel>\n                <ActionPanel.Section>\n                  <ActionPanel.Item\n                    title=\"Add Item\"\n                    icon={Icon.Document}\n                    onAction={() => {\n                      launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n                    }}\n                    shortcut={{ modifiers: [\"cmd\"], key: \"enter\" }}\n                  />\n                  <ActionPanel.Item\n                    title=\"Copy Item\"\n                    icon={Icon.CopyClipboard}\n                    onAction={() => {\n                      Clipboard.copy(item.content);\n                      showToast({ title: `Copied to \"${item.content}\" Clipboard!` });\n                    }}\n                    shortcut={{ modifiers: [\"cmd\"], key: \".\" }}\n                  />\n                  <ActionPanel.Item\n                    title=\"Delete Item\"\n                    icon={Icon.DeleteDocument}\n                    onAction={() => {\n                      deleteItem(index);\n                    }}\n                    shortcut={{ modifiers: [\"cmd\"], key: \"backspace\" }}\n                  />\n                </ActionPanel.Section>\n              </ActionPanel>\n            }\n          />\n        ))\n      ) : (\n        <List.EmptyView\n          icon={{ source: Icon.Stars }}\n          title=\"Woohoo! You got nothing to do!\"\n          description=\"Click \u23CE to remember something!\"\n          actions={\n            <ActionPanel>\n              <ActionPanel.Item\n                title=\"Add Item\"\n                icon={Icon.Plus}\n                onAction={() => {\n                  launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n                }}\n                shortcut={{ modifiers: [\"cmd\"], key: \"enter\" }}\n              />\n            </ActionPanel>\n          }\n        />\n      )}\n    </List>\n  );\n}\n"],
  "mappings": "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",
  "names": ["view_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_fs", "import_path", "import_jsx_runtime", "REMEMBERING_FILE", "path", "fileExists", "fs", "content", "lines", "nonEmptyLines", "line", "updatedCsv", "readRememberedItems", "now", "validLines", "dateString", "testlol", "delimiter", "newFileContents", "filterValidItems", "items", "query", "item", "getExpirationString", "expirationDate", "diff", "year", "month", "day", "hour", "minute", "second", "years", "remaining", "months", "days", "hours", "minutes", "seconds", "setItems", "setQuery", "deleteItem", "index", "filePath", "deletedLine", "newItems", "_", "i", "handleSearch"]
}
