{
  "version": 3,
  "sources": ["../src/menu.tsx"],
  "sourcesContent": ["import path from \"path\";\nimport { MenuBarExtra, environment, LaunchType, launchCommand, Icon, getPreferenceValues } from \"@raycast/api\";\nimport * as fs from \"fs\";\n\nconst REMEMBERING_FILE = path.join(environment.supportPath, \"remembering.csv\");\n\nif (!fs.existsSync(REMEMBERING_FILE)) {\n  // Create the file\n  fs.writeFileSync(REMEMBERING_FILE, \"\");\n}\n\nconst preferences = getPreferenceValues<Preferences>();\nconst sizeValue = preferences.size;\n\nconst second = 1000;\nconst minute = 60 * second;\nconst hour = 60 * minute;\nconst day = 24 * hour;\nconst month = 30 * day;\nconst year = 365 * day;\n\nfunction getCountdown(diff: number) {\n  if (diff > 10 * year) {\n    return \"Expired\";\n  } else if (diff <= 0) {\n    return \"Expired\";\n  } else if (diff >= year) {\n    const years = Math.floor(diff / year);\n    if (years === 1) {\n      return `${years} year`;\n    } else {\n      return `${years} years`;\n    }\n  } else if (diff >= month) {\n    const months = Math.floor(diff / month);\n    if (months === 1) {\n      return `${months} month`;\n    } else {\n      return `${months} months`;\n    }\n  } else if (diff >= day) {\n    const days = Math.floor(diff / day);\n    if (days === 1) {\n      return `${days} day`;\n    } else {\n      return `${days} days`;\n    }\n  } else if (diff >= hour) {\n    const hours = Math.floor(diff / hour);\n    if (hours === 1) {\n      return `${hours} hour`;\n    } else {\n      return `${hours} hours`;\n    }\n  } else if (diff >= minute) {\n    const minutes = Math.floor(diff / minute);\n    if (minutes === 1) {\n      return `${minutes} minute`;\n    } else {\n      return `${minutes} minutes`;\n    }\n  } else {\n    const seconds = Math.floor(diff / second);\n    return `${seconds} seconds`;\n  }\n}\n\nexport default function Command() {\n  const data = fs.readFileSync(REMEMBERING_FILE, \"utf8\");\n  const dates = data\n    .split(\"\\n\")\n    .map((line) => {\n      const [dateString, taskname] = line.split(\",\");\n      return { date: new Date(dateString), taskname };\n    })\n    .filter((date) => date.date > new Date())\n    .sort((a, b) => a.date.getTime() - b.date.getTime());\n\n  if (dates.length === 0) {\n    if (sizeValue === \"compact\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={``} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n    if (sizeValue === \"normal\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n    if (sizeValue === \"large\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n  }\n\n  const closestDate = dates[0];\n  const diff = closestDate.date.getTime() - new Date().getTime();\n  const countdown = getCountdown(diff);\n\n  if (countdown === \"Forever\") {\n    if (sizeValue === \"compact\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={``} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n    if (sizeValue === \"normal\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n    if (sizeValue === \"large\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n  }\n\n  if (countdown === \"Expired\") {\n    if (sizeValue === \"compact\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={``} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n    if (sizeValue === \"normal\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n    if (sizeValue === \"large\") {\n      return (\n        <MenuBarExtra icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} tooltip=\"Enjoy the rest of the day off\">\n          <MenuBarExtra.Item icon={Icon.Stars} title={`Woohoo! You got nothing todo!`} />\n          <MenuBarExtra.Item\n            icon={Icon.CircleProgress100}\n            title=\"Add an item to be remembered!\"\n            onAction={() => {\n              launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n            }}\n          />\n        </MenuBarExtra>\n      );\n    }\n  }\n  const delimiter = \"||&|\"; // Define the delimiter as a regular expression with the \"g\" flag\n  const taskname = closestDate.taskname.replace(delimiter, \",\");\n  if (sizeValue === \"normal\") {\n    return (\n      <MenuBarExtra icon={Icon.ArrowRight} title={countdown} tooltip={taskname}>\n        <MenuBarExtra.Item icon={Icon.ArrowRight} title={` - Expires In ${countdown}!`} />\n        <MenuBarExtra.Item\n          icon={Icon.Document}\n          title=\"View all items being remembered!\"\n          onAction={() => {\n            launchCommand({ name: \"view\", type: LaunchType.UserInitiated });\n          }}\n        />\n        <MenuBarExtra.Item\n          icon={Icon.CircleProgress100}\n          title=\"Add an item to be remembered!\"\n          onAction={() => {\n            launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n          }}\n        />\n      </MenuBarExtra>\n    );\n  }\n  if (sizeValue === \"large\") {\n    return (\n      <MenuBarExtra icon={Icon.ArrowRight} title={`${taskname} - ${countdown}`} tooltip={taskname}>\n        <MenuBarExtra.Item icon={Icon.ArrowRight} title={`${taskname} - Expires In ${countdown}!`} />\n        <MenuBarExtra.Item\n          icon={Icon.Document}\n          title=\"View all items being remembered!\"\n          onAction={() => {\n            launchCommand({ name: \"view\", type: LaunchType.UserInitiated });\n          }}\n        />\n        <MenuBarExtra.Item\n          icon={Icon.CircleProgress100}\n          title=\"Add an item to be remembered!\"\n          onAction={() => {\n            launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n          }}\n        />\n      </MenuBarExtra>\n    );\n  }\n  if (sizeValue === \"compact\") {\n    const formattedCountdown = countdown\n      .replace(\" seconds\", \"s\")\n      .replace(\" second\", \"s\")\n      .replace(\" minutes\", \"m\")\n      .replace(\" minute\", \"m\")\n      .replace(\" hours\", \"h\")\n      .replace(\" hour\", \"h\")\n      .replace(\" days\", \"d\")\n      .replace(\" day\", \"d\")\n      .replace(\" weeks\", \"w\")\n      .replace(\" week\", \"w\")\n      .replace(\" months\", \"m\")\n      .replace(\" month\", \"m\")\n      .replace(\" years\", \"y\")\n      .replace(\" year\", \"y\");\n\n    return (\n      <MenuBarExtra title={formattedCountdown} tooltip={taskname}>\n        <MenuBarExtra.Item icon={Icon.ArrowRight} title={`${taskname} - Expires In ${countdown}!`} />\n        <MenuBarExtra.Item\n          icon={Icon.Document}\n          title=\"View all items being remembered!\"\n          onAction={() => {\n            launchCommand({ name: \"view\", type: LaunchType.UserInitiated });\n          }}\n        />\n        <MenuBarExtra.Item\n          icon={Icon.CircleProgress100}\n          title=\"Add an item to be remembered!\"\n          onAction={() => {\n            launchCommand({ name: \"index\", type: LaunchType.UserInitiated });\n          }}\n        />\n      </MenuBarExtra>\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["menu_exports", "__export", "Command", "__toCommonJS", "import_path", "import_api", "fs", "import_jsx_runtime", "REMEMBERING_FILE", "path", "preferences", "sizeValue", "second", "minute", "hour", "day", "month", "year", "getCountdown", "diff", "years", "months", "days", "hours", "minutes", "dates", "line", "dateString", "taskname", "date", "a", "b", "closestDate", "countdown", "delimiter", "formattedCountdown"]
}
