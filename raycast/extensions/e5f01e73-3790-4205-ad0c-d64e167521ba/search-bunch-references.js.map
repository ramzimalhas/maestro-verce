{
  "version": 3,
  "sources": ["../src/search-bunch-references.tsx", "../src/components/empty-view.tsx", "../src/components/action-open-preferences.tsx", "../src/utils/bunch-reference.ts", "../src/components/action-open-syntax-reference.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Clipboard, Icon, List, showHUD, useNavigation } from \"@raycast/api\";\nimport React, { useState } from \"react\";\nimport { EmptyView } from \"./components/empty-view\";\nimport { bunchReferences } from \"./utils/bunch-reference\";\nimport { ActionOpenSyntaxReference } from \"./components/action-open-syntax-reference\";\n\nexport default function SearchBunchReferences(props: { isPopup: boolean }) {\n  const isPopup = typeof props.isPopup === \"undefined\" ? false : props.isPopup;\n  const [filter, setFilter] = useState<string>(\"All\");\n  const { pop } = useNavigation();\n\n  return (\n    <List\n      navigationTitle={isPopup ? \"Quick Reference\" : \"Search Bunch References\"}\n      searchBarPlaceholder={\"Search references\"}\n      searchBarAccessory={\n        <List.Dropdown onChange={setFilter} tooltip={\"Filter Tag\"}>\n          <List.Dropdown.Item key={\"All\"} title={\"All\"} value={\"All\"} />\n          {bunchReferences.map((value) => {\n            return <List.Dropdown.Item key={value.section} title={value.section} value={value.section} />;\n          })}\n        </List.Dropdown>\n      }\n    >\n      <EmptyView title={\"No Bunch Reference\"} extensionPreferences={true} />\n\n      {bunchReferences.map((value) => {\n        return (\n          (filter === value.section || filter === \"All\") && (\n            <List.Section key={value.section} title={value.section}>\n              {value.items.map((item, index) => {\n                return (\n                  <List.Item\n                    key={index}\n                    icon={\"list-icon.svg\"}\n                    title={item.title}\n                    subtitle={item.value}\n                    keywords={[...item.value.split(\" \"), ...[item.value]]}\n                    actions={\n                      <ActionPanel>\n                        <Action\n                          icon={Icon.Clipboard}\n                          title={\"Copy Reference\"}\n                          onAction={async () => {\n                            await Clipboard.copy(item.title);\n                            if (isPopup) {\n                              pop();\n                            } else {\n                              await showHUD(\"Reference copied to clipboard\");\n                            }\n                          }}\n                        />\n                        <ActionOpenSyntaxReference />\n                      </ActionPanel>\n                    }\n                  />\n                );\n              })}\n            </List.Section>\n          )\n        );\n      })}\n    </List>\n  );\n}\n", "import { Action, ActionPanel, Icon, List, open, showHUD } from \"@raycast/api\";\nimport { ActionOpenPreferences } from \"./action-open-preferences\";\n\nexport function EmptyView(props: { title: string; extensionPreferences: boolean }) {\n  const { title, extensionPreferences } = props;\n  return (\n    <List.EmptyView\n      title={title}\n      icon={{ source: \"empty-icon.svg\" }}\n      actions={\n        <ActionPanel>\n          {extensionPreferences && (\n            <Action\n              icon={Icon.Finder}\n              title={\"Open Bunch Folder\"}\n              shortcut={{ modifiers: [\"cmd\"], key: \"o\" }}\n              onAction={async () => {\n                await open(encodeURI(\"x-bunch://reveal\"));\n                await showHUD(\"Open Bunch Folder\");\n              }}\n            />\n          )}\n          {!extensionPreferences && (\n            <Action\n              icon={Icon.Gear}\n              title={\"Open Bunch Preferences\"}\n              shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n              onAction={() => {\n                open(\"x-bunch://prefs\").then();\n              }}\n            />\n          )}\n          {extensionPreferences && <ActionOpenPreferences />}\n        </ActionPanel>\n      }\n    />\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences } from \"@raycast/api\";\n\nexport function ActionOpenPreferences() {\n  return (\n    <ActionPanel.Section>\n      <Action\n        icon={Icon.Gear}\n        title={\"Open Command Preferences\"}\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n        onAction={openCommandPreferences}\n      />\n    </ActionPanel.Section>\n  );\n}\n", "const apps = [\n  { title: \"App Name\", value: \"Launch app\" },\n  {\n    title: \"%App Name\",\n    value: \"Launch when opening the Bunch, but ignore when closing\",\n  },\n  { title: \"App Name ~5\", value: \"Launch app after 5 second delay\" },\n  { title: \"- XX\", value: \"close all windows of preceding app\" },\n  { title: \"- File\", value: \"open a file in preceding app (can be repeated)\" },\n  {\n    title: \"- 'spotlight search'\",\n    value: \"Run a spotlight search and open the results in preceding app\",\n  },\n  { title: \"- #tag1 #tag2\", value: \"Search for macOS tags\" },\n  { title: \"- {@~w}\", value: \"send a key command to the preceding app\" },\n  { title: \"- [string]\", value: \"type a string in the preceding app\" },\n  { title: \"!AppName\", value: \"Quit app\" },\n  {\n    title: \"!!AppName\",\n    value: \"Launch app when closing bunch (double negative)\",\n  },\n  {\n    title: \"!!!AppName\",\n    value: \"Quit app when closing bunch (triple negative)\",\n  },\n  {\n    title: \"@AppName\",\n    value: \"Focus app (run at end of bunch to hide all other apps)\",\n  },\n  { title: \"AppName_\", value: \"Hide an app\" },\n  { title: \"AppName^\", value: \"Force app to activate\" },\n];\nconst snippets = [\n  {\n    title: \"< my.snippet\",\n    value: \"An external file to be included in the bunch\",\n  },\n  {\n    title: \"- KEY=value\",\n    value: \"A variable to define for use in the snippet as ${KEY}\",\n  },\n  { title: \"< my.snippet#id\", value: \"Reference a section of a snippet file\" },\n  {\n    title: `< my.snippet#id ?\"Run this Snippet?\"`,\n    value: \"Allow interactive confirmation of a snippet\",\n  },\n];\n\nconst urls = [\n  { title: \"http://url\", value: \"Open URL in browser\" },\n  { title: \"urlhandler://\", value: \"Open a system url handler\" },\n];\nconst bunchCommand = [\n  { title: \"(command)\", value: \"Run a Bunch command\" },\n  { title: \"(dark mode [on|off])\", value: \"dark mode on/off\" },\n  { title: \"(do not disturb [on|off])\", value: \"do not disturb on/off\" },\n  { title: \"([hide|show] dock)\", value: \"hide/show dock\" },\n  { title: \"(dock [left|right|bottom])\", value: \"dock left/right/bottom\" },\n  { title: \"([hide|show] desktop)\", value: \"hide/show desktop\" },\n  { title: \"(wallpaper [path(s)])\", value: \"change wallpaper\" },\n  { title: \"(audio [input|output] device_name)\", value: \"audio input/output\" },\n  {\n    title: \"(audio [input|output] volume [0-100])\",\n    value: \"audio input/output\",\n  },\n  { title: \"(audio [input|output] volume [0-100])\", value: \"audio volume\" },\n  { title: \"(audio [input|output] [mute|unmute])\", value: \"mute/unmute audio\" },\n];\nconst applescript = [{ title: \"* AppleScript command\", value: \"Execute Applescript\" }];\n\nconst automatorWorkflow = [\n  { title: \"& Automator Workflow\", value: \"Run an Automator Workflow\" },\n  {\n    title: \"- key=value\",\n    value: \"variable to pass to preceding workflow (can be repeated)\",\n  },\n];\n\nconst shellCommands = [\n  { title: \"$ script_or_cmd [args]\", value: \"Shell script to execute\" },\n  {\n    title: \"- KEY=value\",\n    value: \"Environment variable to export for preceding shell script (can be repeated)\",\n  },\n];\n\nconst frontmatter = [\n  {\n    title: \"close after\",\n    value: \"Automatically close after an interval (e.g. 1h)\",\n  },\n  { title: \"close at\", value: \"Set a time to close daily (e.g. 5pm)\" },\n  {\n    title: \"close on\",\n    value: `Set a day and time to close weekly (e.g. Mon 5pm). Multiple day/times can be combined with commas`,\n  },\n  {\n    title: \"from file\",\n    value: \"A file path to load additional key/value pairs\",\n  },\n  { title: \"from script\", value: \"A shell script path that returns YAML\" },\n  { title: \"ignore\", value: \"Boolean determines menu display of a Bunch\" },\n  { title: \"ignore if\", value: \"Logic to determine if Bunch displays in menu\" },\n  { title: \"ignore unless\", value: \"Negative version of ignore if\" },\n  {\n    title: \"ignores state\",\n    value: \"true allows open/close when already open/closed\",\n  },\n  { title: \"menu divider\", value: \"Add a menu divider before or after\" },\n  { title: \"menu order\", value: \"Menu order, 0\u201399 at beginning, >100 at end\" },\n  { title: \"only opens\", value: \"true has the same effect as toggles: false\" },\n  {\n    title: \"open at\",\n    value: \"Set a time to open this bunch daily (e.g. 6:30am)\",\n  },\n  { title: \"open every\", value: \"Repeat open at intervals (e.g. 30m)\" },\n  {\n    title: \"open on\",\n    value: `Set a day and time to open weekly (e.g. Tue 8am). Multiple day/times can be combined with commas`,\n  },\n  { title: \"quits apps\", value: \"always close apps open in other Bunches\" },\n  {\n    title: \"run after\",\n    value: \"Comma-separated paths to scripts to run after opening\",\n  },\n  {\n    title: \"run after close\",\n    value: \"Comma-separated paths to scripts to run after closing\",\n  },\n  {\n    title: \"run before\",\n    value: \"Comma-separated paths to scripts to run before opening\",\n  },\n  {\n    title: \"run before close\",\n    value: \"Comma-separated paths to scripts to run before closing\",\n  },\n  { title: \"schedule if\", value: \"Only schedule on specific Mac(s) (UUID1 )\" },\n  { title: \"schedule unless\", value: \"Negative version of schedule if\" },\n  {\n    title: \"sequence\",\n    value: \"parallel or sequential, determines execution order\",\n  },\n  {\n    title: \"shortcut\",\n    value: \"Keyboard shortcut for opening the Bunch (e.g. @a)\",\n  },\n  { title: \"single bunch mode\", value: \"ignore prevents closing\" },\n  {\n    title: \"startup\",\n    value: `true, false, or ask to open on launch. Can also be a UUID2  run only on a specific Mac`,\n  },\n  {\n    title: \"tags\",\n    value: \"Add tags to the Bunch for organization and batching\",\n  },\n  { title: \"title\", value: \"Set the menu display title. Emojis OK.\" },\n  {\n    title: \"title prefix\",\n    value: `Set a prefix that goes before the menu title. Prefixes set by folder/tag frontmatter are combined`,\n  },\n  { title: \"toggles\", value: \"false prevents toggling this Bunch open/closed\" },\n];\n\nconst urlHandler = [\n  { title: \"x-bunch://open?bunch=[BUNCH NAME]\", value: \"Open a Bunch\" },\n  { title: \"x-bunch://[BUNCH NAME]\", value: \"Open shorthand\" },\n  { title: \"x-bunch://close?bunch=[BUNCH NAME]\", value: \"Close a Bunch\" },\n  { title: \"x-bunch://close/[BUNCH NAME]\", value: \"Close shorthand\" },\n  { title: \"x-bunch://toggle?bunch=[BUNCH NAME]\", value: \"Toggle a Bunch\" },\n  { title: \"x-bunch://toggle/[BUNCH NAME]\", value: \"Toggle shorthand\" },\n  { title: \"x-bunch://raw?txt=[BUNCH TEXT]\", value: \"Run raw text as a Bunch\" },\n  {\n    title: \"x-bunch://snippet?file=[SNIPPET PATH]&fragment=[FRAGMENT]&foo=bar\",\n    value: \"Run a snippet with fragment and variables\",\n  },\n];\n\nexport const bunchReferences = [\n  { section: \"Apps\", items: apps },\n  { section: \"Snippets\", items: snippets },\n  { section: \"URLs\", items: urls },\n  { section: \"Bunch Command\", items: bunchCommand },\n  { section: \"Applescript\", items: applescript },\n  { section: \"Automator Workflow\", items: automatorWorkflow },\n  { section: \"Shell Commands\", items: shellCommands },\n  { section: \"Frontmatter\", items: frontmatter },\n  { section: \"URL Handler\", items: urlHandler },\n];\n", "import { Action, Icon } from \"@raycast/api\";\nimport React from \"react\";\n\nexport function ActionOpenSyntaxReference() {\n  return (\n    <Action.OpenInBrowser\n      icon={Icon.List}\n      title={\"Bunch Syntax Reference\"}\n      shortcut={{ modifiers: [\"ctrl\", \"shift\"], key: \"s\" }}\n      url={\"https://bunchapp.co/docs/bunch-files/quick-reference/#quick-reference\"}\n    />\n  );\n}\n"],
  "mappings": "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",
  "names": ["search_bunch_references_exports", "__export", "SearchBunchReferences", "__toCommonJS", "import_api", "import_react", "import_api", "import_api", "import_jsx_runtime", "ActionOpenPreferences", "import_jsx_runtime", "EmptyView", "props", "title", "extensionPreferences", "ActionOpenPreferences", "apps", "snippets", "urls", "bunchCommand", "applescript", "automatorWorkflow", "shellCommands", "frontmatter", "urlHandler", "bunchReferences", "import_api", "import_jsx_runtime", "ActionOpenSyntaxReference", "import_jsx_runtime", "SearchBunchReferences", "props", "isPopup", "filter", "setFilter", "pop", "bunchReferences", "value", "EmptyView", "item", "index", "ActionOpenSyntaxReference"]
}
