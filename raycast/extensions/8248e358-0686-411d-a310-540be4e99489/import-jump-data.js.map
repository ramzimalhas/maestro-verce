{
  "version": 3,
  "sources": ["../src/import-jump-data.tsx"],
  "sourcesContent": ["import { useState } from \"react\";\nimport { LocalStorage, Form, ActionPanel, Action, showToast, popToRoot, Icon } from \"@raycast/api\";\nimport { LocalStorageValue } from \"./types\";\n\nconst importData = async (data: { [x: string]: number }, importMethod: string) => {\n  if (importMethod == \"Merge\") {\n    const entries = await LocalStorage.allItems<LocalStorageValue>();\n\n    Object.entries(entries).forEach(([key]) => {\n      if (key in data) {\n        Promise.resolve(LocalStorage.setItem(key, data[key])).then(() => delete data[key]);\n      }\n    });\n\n    for (const key in data) {\n      await LocalStorage.setItem(key, data[key]);\n    }\n\n    showToast({ title: \"Updated Jump data!\" });\n  } else if (importMethod == \"Replace\") {\n    // Replace all destnations and weights\n    await LocalStorage.clear();\n    for (const key in data) {\n      await LocalStorage.setItem(key, data[key]);\n    }\n    showToast({ title: \"Replaced Jump data!\" });\n  }\n  popToRoot();\n};\n\nconst checkJSONFormat = (jsonString: string, setJSONError: (error: string | undefined) => void) => {\n  // Check for properly formatted jump data JSON string\n  let error = null;\n  if (jsonString.trim().length == 0) {\n    error = \"JSON string cannot be empty.\";\n  } else {\n    try {\n      const data = JSON.parse(jsonString.trim());\n      for (const key in data) {\n        if (!parseFloat(data[key])) {\n          error = \"Unexpected data type in place of numeric weights.\";\n          break;\n        }\n      }\n    } catch {\n      error = \"Please enter a valid JSON string!\";\n    }\n\n    if (error == null && !jsonString.trim().match(/^{(.+:.+,?)+}$/)) {\n      error = \"Please enter a valid JSON string!\";\n    }\n  }\n\n  if (error) {\n    setJSONError(error);\n    return error;\n  } else {\n    setJSONError(undefined);\n    return undefined;\n  }\n};\n\nconst ImportDataForm = () => {\n  const [jsonError, setJSONError] = useState<string | undefined>();\n\n  // Display form for inputting JSON data\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm\n            icon={Icon.ChevronRight}\n            onSubmit={(values) => {\n              if (checkJSONFormat(values.jsonStringField, setJSONError) == undefined) {\n                const data = JSON.parse(values.jsonStringField.trim());\n                Promise.resolve(importData(data, values.importMethodField));\n              }\n            }}\n          />\n        </ActionPanel>\n      }\n    >\n      <Form.Dropdown\n        id=\"importMethodField\"\n        title=\"Import Method\"\n        defaultValue=\"Replace\"\n        info={`'Merge' updates the weights of existing entries and adds any new entries with a unique name.\n\n'Replace All Data' removes existing entries and adds the newly specified entries.`}\n      >\n        <Form.Dropdown.Item key=\"Merge\" title=\"Merge\" value=\"Merge\" />\n        <Form.Dropdown.Item key=\"Replace\" title=\"Replace All Data\" value=\"Replace\" />\n      </Form.Dropdown>\n\n      <Form.TextArea\n        id=\"jsonStringField\"\n        title=\"JSON String\"\n        placeholder=\"Enter a JSON string...\"\n        error={jsonError}\n        onChange={(jsonString) => {\n          checkJSONFormat(jsonString, setJSONError);\n        }}\n        onBlur={(event) => {\n          checkJSONFormat(event.target.value as string, setJSONError);\n        }}\n        info={`Must be a valid JSON string specifying destinations and weights. For example:\n\n{\"https://google.com\":1.1880000000000002,\"https://mail.google.com\":1.05,\"/System/Applications/Calendar.app\":1.05}`}\n      />\n    </Form>\n  );\n};\n\nexport default function Command() {\n  return <ImportDataForm />;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAyB,iBACzBC,EAAoF,wBAqE1EC,EAAA,6BAlEJC,EAAa,MAAOC,EAA+BC,IAAyB,CAChF,GAAIA,GAAgB,QAAS,CAC3B,IAAMC,EAAU,MAAM,eAAa,SAA4B,EAE/D,OAAO,QAAQA,CAAO,EAAE,QAAQ,CAAC,CAACC,CAAG,IAAM,CACrCA,KAAOH,GACT,QAAQ,QAAQ,eAAa,QAAQG,EAAKH,EAAKG,CAAG,CAAC,CAAC,EAAE,KAAK,IAAM,OAAOH,EAAKG,CAAG,CAAC,CAErF,CAAC,EAED,QAAWA,KAAOH,EAChB,MAAM,eAAa,QAAQG,EAAKH,EAAKG,CAAG,CAAC,KAG3C,aAAU,CAAE,MAAO,oBAAqB,CAAC,UAChCF,GAAgB,UAAW,CAEpC,MAAM,eAAa,MAAM,EACzB,QAAWE,KAAOH,EAChB,MAAM,eAAa,QAAQG,EAAKH,EAAKG,CAAG,CAAC,KAE3C,aAAU,CAAE,MAAO,qBAAsB,CAAC,KAE5C,aAAU,CACZ,EAEMC,EAAkB,CAACC,EAAoBC,IAAsD,CAEjG,IAAIC,EAAQ,KACZ,GAAIF,EAAW,KAAK,EAAE,QAAU,EAC9BE,EAAQ,mCACH,CACL,GAAI,CACF,IAAMP,EAAO,KAAK,MAAMK,EAAW,KAAK,CAAC,EACzC,QAAWF,KAAOH,EAChB,GAAI,CAAC,WAAWA,EAAKG,CAAG,CAAC,EAAG,CAC1BI,EAAQ,oDACR,MAGN,MAAE,CACAA,EAAQ,mCACV,CAEIA,GAAS,MAAQ,CAACF,EAAW,KAAK,EAAE,MAAM,gBAAgB,IAC5DE,EAAQ,qCAIZ,GAAIA,EACF,OAAAD,EAAaC,CAAK,EACXA,EAEPD,EAAa,MAAS,CAG1B,EAEME,EAAiB,IAAM,CAC3B,GAAM,CAACC,EAAWH,CAAY,KAAI,YAA6B,EAG/D,SACE,QAAC,QACC,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CACC,KAAM,OAAK,aACX,SAAWI,GAAW,CACpB,GAAIN,EAAgBM,EAAO,gBAAiBJ,CAAY,GAAK,KAAW,CACtE,IAAMN,EAAO,KAAK,MAAMU,EAAO,gBAAgB,KAAK,CAAC,EACrD,QAAQ,QAAQX,EAAWC,EAAMU,EAAO,iBAAiB,CAAC,EAE9D,EACF,EACF,EAGF,qBAAC,OAAK,SAAL,CACC,GAAG,oBACH,MAAM,gBACN,aAAa,UACb,KAAM;AAAA;AAAA,mFAIN,oBAAC,OAAK,SAAS,KAAd,CAA+B,MAAM,QAAQ,MAAM,SAA5B,OAAoC,KAC5D,OAAC,OAAK,SAAS,KAAd,CAAiC,MAAM,mBAAmB,MAAM,WAAzC,SAAmD,GAC7E,KAEA,OAAC,OAAK,SAAL,CACC,GAAG,kBACH,MAAM,cACN,YAAY,yBACZ,MAAOD,EACP,SAAWJ,GAAe,CACxBD,EAAgBC,EAAYC,CAAY,CAC1C,EACA,OAASK,GAAU,CACjBP,EAAgBO,EAAM,OAAO,MAAiBL,CAAY,CAC5D,EACA,KAAM;AAAA;AAAA,mHAGR,GACF,CAEJ,EAEe,SAARZ,GAA2B,CAChC,SAAO,OAACc,EAAA,EAAe,CACzB",
  "names": ["import_jump_data_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "import_jsx_runtime", "importData", "data", "importMethod", "entries", "key", "checkJSONFormat", "jsonString", "setJSONError", "error", "ImportDataForm", "jsonError", "values", "event"]
}
