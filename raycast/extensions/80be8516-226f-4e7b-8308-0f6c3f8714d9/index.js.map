{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/components/VolumeList.tsx", "../src/utils.ts", "../src/components/VolumeListItem.tsx"],
  "sourcesContent": ["import VolumeList from \"./components/VolumeList\";\nexport default VolumeList;\n", "import { useState, useEffect } from \"react\";\nimport { List, showToast, Toast, ToastStyle } from \"@raycast/api\";\n\nimport { Volume } from \"../types\";\nimport { listVolumes, ejectVolume } from \"../utils\";\nimport VolumeListItem from \"./VolumeListItem\";\n\nexport default function VolumeList() {\n  const [volumes, setVolumes] = useState<Volume[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  async function fetchVolumes() {\n    setIsLoading(true);\n    setVolumes(await listVolumes());\n    setIsLoading(false);\n  }\n\n  async function eject(volume: Volume): Promise<void> {\n    const toast = new Toast({ style: ToastStyle.Animated, title: `Ejecting ${volume.name}...` });\n    await toast.show();\n\n    try {\n      await ejectVolume(volume);\n      await toast.hide();\n      showToast(ToastStyle.Success, `Successfully Ejected ${volume.name}`);\n    } catch (e: any) {\n      console.log(\">>> Error: \", e.message);\n      await toast.hide();\n      showToast(ToastStyle.Failure, \"Error ejecting volume. Is it in use?\");\n    }\n\n    await fetchVolumes();\n  }\n\n  useEffect(() => {\n    fetchVolumes();\n  }, []);\n\n  return (\n    <List isLoading={isLoading} searchBarPlaceholder=\"Filter Volumes By Name...\">\n      {volumes.map((volume) => (\n        <VolumeListItem key={volume.name} volume={volume} eject={eject} />\n      ))}\n    </List>\n  );\n}\n", "import util from \"util\";\nimport child_process from \"child_process\";\nimport os from \"os\";\nimport { showToast, ToastStyle, getPreferenceValues } from \"@raycast/api\";\n\nimport { Volume, Preferences } from \"./types\";\n\nconst exec = util.promisify(child_process.exec);\n\n/**\n * List all currently-mounted volumes\n */\nexport async function listVolumes(): Promise<Volume[]> {\n  // TODO: Support more environments other than just Mac\n  switch (os.platform()) {\n    case \"darwin\":\n      return listVolumesMac();\n\n    default:\n      throw new Error(\"Unsupported environment\");\n  }\n}\n\nasync function listVolumesMac(): Promise<Volume[]> {\n  const exePath = \"ls /Volumes\";\n  const options = {\n    timeout: 0,\n  };\n\n  let volumes: Volume[] = [];\n  try {\n    const { stderr, stdout } = await exec(exePath, options);\n    volumes = getVolumesFromLsCommandMac(stdout);\n  } catch (e: any) {\n    console.log(e.message);\n    showToast(ToastStyle.Failure, \"Error listing volumes\", e.message);\n  }\n\n  return volumes;\n}\n\nfunction getVolumesFromLsCommandMac(raw: string): Volume[] {\n  const replacementChars = \"~~~~~~~~~\";\n  const updatedRaw = raw.replace(/\\n/g, replacementChars);\n  const prefs = getPreferenceValues<Preferences>();\n  const volumesToIgnore = prefs?.ignoredVolumes?.split(\",\");\n\n  const parts = updatedRaw.split(replacementChars);\n  let volumes: Volume[] = parts\n    .map((p) => ({\n      name: p,\n    }))\n    .filter((v) => v.name !== \"\")\n    .filter((v) => !v.name.includes(\"TimeMachine.localsnapshots\"));\n\n  if (volumesToIgnore != null) {\n    volumes = volumes.filter((v) => volumesToIgnore.findIndex((vol) => vol === v.name) < 0);\n  }\n\n  return volumes;\n}\n\n/**\n * Given the name of a mounted volume, safely ejects that volume\n * Very much based on the node-eject-media package, updated for\n * more modern JS\n * https://github.com/jayalfredprufrock/node-eject-media/blob/master/index.js\n */\nexport async function ejectVolume(volume: Volume): Promise<void> {\n  // NOTE: Timeout of 0 should mean that it will wait infinitely\n  const options = {\n    timeout: 0,\n  };\n\n  let exePath;\n\n  // TODO: Support Windows\n  switch (os.platform()) {\n    case \"darwin\":\n      exePath = '/usr/sbin/diskutil eject \"' + volume.name + '\"';\n      break;\n\n    case \"linux\":\n      exePath = 'eject -f \"' + volume.name + '\"* 2>/dev/null || /bin/true';\n      break;\n\n    default:\n      throw new Error(\"Unsupported environment\");\n  }\n\n  // NOTE: This could potentially let an error go through, however the calling function\n  // should handle it, and show toasts appropriately\n  await exec(exePath, options);\n}\n", "import { ActionPanel, List } from \"@raycast/api\";\n\nimport { Volume } from \"../types\";\n\nexport default function VolumeListItem(props: { volume: Volume; eject: (volume: Volume) => Promise<void> }) {\n  const { volume, eject } = props;\n\n  return (\n    <List.Item\n      id={volume.name}\n      key={volume.name}\n      title={volume.name}\n      subtitle=\"Select to eject\"\n      icon=\"list-icon.png\"\n      actions={\n        <ActionPanel>\n          <ActionPanel.Item title=\"Eject Volume\" onAction={() => eject(volume)} />\n        </ActionPanel>\n      }\n    />\n  );\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAoC,iBACpCC,EAAmD,wBCDnD,IAAAC,EAAiB,mBACjBC,EAA0B,4BAC1BC,EAAe,iBACfC,EAA2D,wBAIrDC,EAAO,EAAAC,QAAK,UAAU,EAAAC,QAAc,IAAI,EAK9C,eAAsBC,GAAiC,CAErD,OAAQ,EAAAC,QAAG,SAAS,EAAG,CACrB,IAAK,SACH,OAAOC,EAAe,EAExB,QACE,MAAM,IAAI,MAAM,yBAAyB,CAC7C,CACF,CAEA,eAAeA,GAAoC,CACjD,IAAMC,EAAU,cACVC,EAAU,CACd,QAAS,CACX,EAEIC,EAAoB,CAAC,EACzB,GAAI,CACF,GAAM,CAAE,OAAAC,EAAQ,OAAAC,CAAO,EAAI,MAAMV,EAAKM,EAASC,CAAO,EACtDC,EAAUG,EAA2BD,CAAM,CAC7C,OAASE,EAAP,CACA,QAAQ,IAAIA,EAAE,OAAO,KACrB,aAAU,aAAW,QAAS,wBAAyBA,EAAE,OAAO,CAClE,CAEA,OAAOJ,CACT,CAEA,SAASG,EAA2BE,EAAuB,CACzD,IAAMC,EAAmB,YACnBC,EAAaF,EAAI,QAAQ,MAAOC,CAAgB,EAEhDE,KADQ,uBAAiC,GAChB,gBAAgB,MAAM,GAAG,EAGpDR,EADUO,EAAW,MAAMD,CAAgB,EAE5C,IAAKG,IAAO,CACX,KAAMA,CACR,EAAE,EACD,OAAQC,GAAMA,EAAE,OAAS,EAAE,EAC3B,OAAQA,GAAM,CAACA,EAAE,KAAK,SAAS,4BAA4B,CAAC,EAE/D,OAAIF,GAAmB,OACrBR,EAAUA,EAAQ,OAAQU,GAAMF,EAAgB,UAAWG,GAAQA,IAAQD,EAAE,IAAI,EAAI,CAAC,GAGjFV,CACT,CAQA,eAAsBY,EAAYC,EAA+B,CAE/D,IAAMd,EAAU,CACd,QAAS,CACX,EAEID,EAGJ,OAAQ,EAAAF,QAAG,SAAS,EAAG,CACrB,IAAK,SACHE,EAAU,6BAA+Be,EAAO,KAAO,IACvD,MAEF,IAAK,QACHf,EAAU,aAAee,EAAO,KAAO,8BACvC,MAEF,QACE,MAAM,IAAI,MAAM,yBAAyB,CAC7C,CAIA,MAAMrB,EAAKM,EAASC,CAAO,CAC7B,CC7FA,IAAAe,EAAkC,wBAgBxBC,EAAA,6BAZK,SAARC,EAAgCC,EAAqE,CAC1G,GAAM,CAAE,OAAAC,EAAQ,MAAAC,CAAM,EAAIF,EAE1B,SACE,OAAC,OAAK,KAAL,CACC,GAAIC,EAAO,KAEX,MAAOA,EAAO,KACd,SAAS,kBACT,KAAK,gBACL,WACE,OAAC,eACC,mBAAC,cAAY,KAAZ,CAAiB,MAAM,eAAe,SAAU,IAAMC,EAAMD,CAAM,EAAG,EACxE,GAPGA,EAAO,IASd,CAEJ,CFoBQ,IAAAE,EAAA,6BAlCO,SAARC,GAA8B,CACnC,GAAM,CAACC,EAASC,CAAU,KAAI,YAAmB,CAAC,CAAC,EAC7C,CAACC,EAAWC,CAAY,KAAI,YAAS,EAAI,EAE/C,eAAeC,GAAe,CAC5BD,EAAa,EAAI,EACjBF,EAAW,MAAMI,EAAY,CAAC,EAC9BF,EAAa,EAAK,CACpB,CAEA,eAAeG,EAAMC,EAA+B,CAClD,IAAMC,EAAQ,IAAI,QAAM,CAAE,MAAO,aAAW,SAAU,MAAO,YAAYD,EAAO,SAAU,CAAC,EAC3F,MAAMC,EAAM,KAAK,EAEjB,GAAI,CACF,MAAMC,EAAYF,CAAM,EACxB,MAAMC,EAAM,KAAK,KACjB,aAAU,aAAW,QAAS,wBAAwBD,EAAO,MAAM,CACrE,OAASG,EAAP,CACA,QAAQ,IAAI,cAAeA,EAAE,OAAO,EACpC,MAAMF,EAAM,KAAK,KACjB,aAAU,aAAW,QAAS,sCAAsC,CACtE,CAEA,MAAMJ,EAAa,CACrB,CAEA,sBAAU,IAAM,CACdA,EAAa,CACf,EAAG,CAAC,CAAC,KAGH,OAAC,QAAK,UAAWF,EAAW,qBAAqB,4BAC9C,SAAAF,EAAQ,IAAKO,MACZ,OAACI,EAAA,CAAiC,OAAQJ,EAAQ,MAAOD,GAApCC,EAAO,IAAoC,CACjE,EACH,CAEJ,CD5CA,IAAOK,EAAQC",
  "names": ["src_exports", "__export", "src_default", "__toCommonJS", "import_react", "import_api", "import_util", "import_child_process", "import_os", "import_api", "exec", "util", "child_process", "listVolumes", "os", "listVolumesMac", "exePath", "options", "volumes", "stderr", "stdout", "getVolumesFromLsCommandMac", "e", "raw", "replacementChars", "updatedRaw", "volumesToIgnore", "p", "v", "vol", "ejectVolume", "volume", "import_api", "import_jsx_runtime", "VolumeListItem", "props", "volume", "eject", "import_jsx_runtime", "VolumeList", "volumes", "setVolumes", "isLoading", "setIsLoading", "fetchVolumes", "listVolumes", "eject", "volume", "toast", "ejectVolume", "e", "VolumeListItem", "src_default", "VolumeList"]
}
