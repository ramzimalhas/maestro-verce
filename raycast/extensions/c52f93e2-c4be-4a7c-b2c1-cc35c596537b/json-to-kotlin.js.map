{
  "version": 3,
  "sources": ["../src/json-to-kotlin.tsx", "../node_modules/json-wasm/dist/index.mjs", "../src/lib/use-form.ts", "../src/components/DefaultForm.tsx"],
  "sourcesContent": ["import { JSONWasm } from \"json-wasm\";\nimport { useForm } from \"./lib/use-form\";\nimport { DefaultForm } from \"./components/DefaultForm\";\n\nexport default () => {\n  const formProps = useForm({\n    transform: async (value: string) => {\n      JSON.parse(value);\n      return await JSONWasm(\"Root\", value, { output_mode: \"kotlin\" });\n    },\n  });\n\n  return <DefaultForm {...formProps} />;\n};\n", "import jsonwasm from 'json_typegen_wasm/json_typegen_wasm_bg.wasm';\n\nlet wasm;\nlet WASM_VECTOR_LEN = 0;\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachegetUint8Memory0;\n}\nconst lTextEncoder = typeof TextEncoder === \"undefined\" ? (0, module.require)(\"util\").TextEncoder : TextEncoder;\nconst cachedTextEncoder = new lTextEncoder(\"utf-8\");\nconst encodeString = typeof cachedTextEncoder.encodeInto === \"function\" ? function(arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === void 0) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr2 = malloc(buf.length);\n    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr2;\n  }\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 127)\n      break;\n    mem[ptr + offset] = code;\n  }\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachegetInt32Memory0;\n}\nconst lTextDecoder = typeof TextDecoder === \"undefined\" ? (0, module.require)(\"util\").TextDecoder : TextDecoder;\nconst cachedTextDecoder = new lTextDecoder(\"utf-8\", { ignoreBOM: true, fatal: true });\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nasync function JSONWasm(name, input, options) {\n  if (!wasm) {\n    const { instance } = await WebAssembly.instantiate(jsonwasm);\n    wasm = instance.exports;\n  }\n  try {\n    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n    const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ptr2 = passStringToWasm0(JSON.stringify(options || {}), wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len2 = WASM_VECTOR_LEN;\n    wasm.run(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n\nexport { JSONWasm };\n", "import { useEffect, useState } from \"react\";\n\nexport const useForm = ({\n  transformDeps = [],\n  transform,\n}: {\n  transformDeps?: unknown[];\n  transform: (value: string) => Promise<string> | string;\n}) => {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setOutput(await transform(input));\n      } catch (err) {\n        setOutput(\"Invalid input\");\n      }\n    })();\n  }, [input, ...transformDeps]);\n\n  return {\n    inputProps: { value: input, onChange: setInput, id: \"input\", title: \"Input\", autoFocus: true },\n    outputProps: {\n      value: output,\n      id: \"output\",\n      title: \"Output\",\n      onChange: () => {\n        //\n      },\n    },\n  };\n};\n", "import { Action, ActionPanel, Form } from \"@raycast/api\";\nimport { useForm } from \"../lib/use-form\";\n\ntype DefaultFormProps = ReturnType<typeof useForm> & {\n  actions?: React.ReactNode;\n  options?: React.ReactNode;\n  output?: React.ReactNode;\n  input?: React.ReactNode;\n};\n\nexport function DefaultForm({\n  inputProps,\n  outputProps,\n  actions: Actions,\n  options: Options,\n  output: Output,\n  input: Input,\n}: DefaultFormProps) {\n  return (\n    <Form\n      actions={\n        Actions || (\n          <ActionPanel>\n            <Action.CopyToClipboard content={outputProps.value} />\n            <Action.Paste content={outputProps.value} />\n          </ActionPanel>\n        )\n      }\n    >\n      {Input ? Input : <Form.TextArea {...inputProps} />}\n      {Options}\n      {Output ? Output : <Form.TextArea {...outputProps} />}\n    </Form>\n  );\n}\n"],
  "mappings": "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",
  "names": ["json_to_kotlin_exports", "__export", "json_to_kotlin_default", "__toCommonJS", "wasm", "WASM_VECTOR_LEN", "cachegetUint8Memory0", "getUint8Memory0", "lTextEncoder", "cachedTextEncoder", "encodeString", "arg", "view", "buf", "passStringToWasm0", "malloc", "realloc", "ptr2", "len", "ptr", "mem", "offset", "code", "ret", "cachegetInt32Memory0", "getInt32Memory0", "lTextDecoder", "cachedTextDecoder", "getStringFromWasm0", "JSONWasm", "name", "input", "options", "instance", "json_typegen_wasm_bg_default", "retptr", "ptr0", "len0", "ptr1", "len1", "len2", "r0", "r1", "import_react", "useForm", "transformDeps", "transform", "input", "setInput", "output", "setOutput", "import_api", "import_jsx_runtime", "DefaultForm", "inputProps", "outputProps", "Actions", "Options", "Output", "Input", "import_jsx_runtime", "json_to_kotlin_default", "formProps", "useForm", "value", "JSONWasm", "DefaultForm"]
}
