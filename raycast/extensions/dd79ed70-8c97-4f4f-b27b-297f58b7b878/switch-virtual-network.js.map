{
  "version": 3,
  "sources": ["../src/switch-virtual-network.tsx", "../src/lib.ts"],
  "sourcesContent": ["import { Action, ActionPanel, List, PopToRootType, Toast, showHUD, showToast } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { VirtualNetwork, getVirtualNetworks, switchVirtualNetwork } from \"./lib\";\n\nconst ListItem = ({\n  virtualNetwork,\n  onSwitchVirtualNetwork,\n}: {\n  virtualNetwork: VirtualNetwork;\n  onSwitchVirtualNetwork: (id: string) => void;\n}) => {\n  const accessories = [];\n  if (virtualNetwork.active) {\n    accessories.push({ text: \"Active\" });\n  }\n  if (virtualNetwork.default) {\n    accessories.push({ text: \"Default\" });\n  }\n\n  return (\n    <List.Item\n      key={virtualNetwork.id}\n      id={virtualNetwork.id}\n      title={virtualNetwork.name}\n      subtitle={virtualNetwork.comment}\n      actions={\n        <ActionPanel title=\"Actions\">\n          <Action onAction={() => onSwitchVirtualNetwork(virtualNetwork.id)} title=\"Switch\" />\n        </ActionPanel>\n      }\n      accessories={accessories}\n    />\n  );\n};\n\nexport default () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [items, setItems] = useState<VirtualNetwork[]>([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getVirtualNetworks()\n      .then((res) => setItems(res))\n      .then(() => setIsLoading(false));\n  }, []);\n\n  const onSwitchVirtualNetwork = async (id: string) => {\n    const result = await switchVirtualNetwork(id);\n    if (result) {\n      await showHUD(\"Switched Virtual Network\", {\n        clearRootSearch: true,\n        popToRootType: PopToRootType.Immediate,\n      });\n    } else {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Failed to switch Virtual Network\",\n      });\n    }\n  };\n  if (!isLoading && items.length === 0) {\n    return (\n      <List searchBarPlaceholder=\"Search Virtual Networks\" isLoading={isLoading}>\n        <List.EmptyView title=\"No Virtual Networks found\" />;\n      </List>\n    );\n  }\n\n  return (\n    <List searchBarPlaceholder=\"Search Virtual Networks\" isLoading={isLoading}>\n      {items.map((item: VirtualNetwork) => (\n        <ListItem key={item.id} virtualNetwork={item} onSwitchVirtualNetwork={onSwitchVirtualNetwork} />\n      ))}\n    </List>\n  );\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport util from \"util\";\nconst execPromise = util.promisify(exec);\n\nconst preferences: { wrapCliPath: string } = getPreferenceValues();\nconst DEFAULT_WRAP_CLI_PATH = \"/Applications/Cloudflare WARP.app/Contents/Resources/warp-cli\";\nconst wrapCliCmd = preferences.wrapCliPath ?? DEFAULT_WRAP_CLI_PATH;\n\nexport function execCommand(cmd: string) {\n  return execPromise(`\"${wrapCliCmd}\" ${cmd}`);\n}\n\nexport async function connectToWarp(): Promise<boolean> {\n  try {\n    const { stdout } = await execCommand(\"connect\");\n    if (stdout.includes(\"Success\")) {\n      return true;\n    }\n    throw new Error(\"Failed to connect\");\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nexport async function disconnectFromWarp(): Promise<boolean> {\n  try {\n    const { stdout } = await execCommand(\"disconnect\");\n    if (stdout.includes(\"Success\")) {\n      return true;\n    }\n    throw new Error(\"Failed to connect\");\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nexport enum ConnectionStatus {\n  Connected = \"connected\",\n  Disconnected = \"disconnected\",\n  Unknown = \"unknown\",\n}\nexport type StatusResult = {\n  status: ConnectionStatus;\n  disconnectReason: string;\n};\nexport async function getWarpStatus(): Promise<StatusResult> {\n  const { stdout } = await execCommand(\"status\");\n  const lines = stdout.trim().split(\"\\n\");\n  if (lines.length < 2) {\n    return { status: ConnectionStatus.Disconnected, disconnectReason: \"unknown\" };\n  }\n  if (lines[1].includes(\"Disconnected\")) {\n    return {\n      status: ConnectionStatus.Disconnected,\n      disconnectReason: lines[1].substring(\"Status update: Disconnected. Reason: \".length),\n    };\n  }\n  if (lines[1].includes(\"Connected\")) {\n    return { status: ConnectionStatus.Connected, disconnectReason: \"\" };\n  }\n  return { status: ConnectionStatus.Unknown, disconnectReason: \"unknown\" };\n}\n\nexport type VirtualNetwork = {\n  id: string;\n  name: string;\n  comment: string;\n  default: boolean;\n  active: boolean;\n};\n\nexport async function getVirtualNetworks(): Promise<VirtualNetwork[]> {\n  const { stdout } = await execCommand(\"get-virtual-networks\");\n  const lines = stdout.trim().split(\"\\n\");\n  const currentlySelected = lines[1].split(\" \")[2]?.trim() ?? \"\";\n  const rawData = lines.slice(2).filter((line) => line !== \"\");\n\n  const networks = [];\n  let i = 0;\n  while (i < rawData.length) {\n    if (i + 4 > rawData.length) break;\n    const [id, name, comment, defaultNetwork] = rawData.slice(i, i + 4);\n    networks.push({\n      id: id.substring(4),\n      name: name.substring(6),\n      comment: comment.substring(8),\n      default: defaultNetwork.substring(9) === \"true\",\n      active: id.substring(4) === currentlySelected,\n    });\n    i += 4;\n  }\n  return networks;\n}\n\nexport async function switchVirtualNetwork(id: string): Promise<boolean> {\n  try {\n    const disconnected = await disconnectFromWarp();\n    if (!disconnected) {\n      throw new Error(\"Failed to disconnect\");\n    }\n    const { stdout } = await execCommand(`set-virtual-network ${id}`);\n    if (!stdout.includes(\"Success\")) {\n      throw new Error(\"Failed to switch network\");\n    }\n    const connectStatus = await connectToWarp();\n    if (!connectStatus) {\n      throw new Error(\"Failed to connect\");\n    }\n    return true;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": ["switch_virtual_network_exports", "__export", "switch_virtual_network_default", "__toCommonJS", "import_api", "import_react", "import_api", "import_child_process", "import_util", "execPromise", "util", "preferences", "DEFAULT_WRAP_CLI_PATH", "wrapCliCmd", "execCommand", "cmd", "connectToWarp", "stdout", "e", "disconnectFromWarp", "getVirtualNetworks", "stdout", "execCommand", "lines", "currentlySelected", "rawData", "line", "networks", "i", "id", "name", "comment", "defaultNetwork", "switchVirtualNetwork", "disconnectFromWarp", "connectToWarp", "import_jsx_runtime", "ListItem", "virtualNetwork", "onSwitchVirtualNetwork", "accessories", "switch_virtual_network_default", "isLoading", "setIsLoading", "items", "setItems", "getVirtualNetworks", "res", "id", "switchVirtualNetwork", "item"]
}
