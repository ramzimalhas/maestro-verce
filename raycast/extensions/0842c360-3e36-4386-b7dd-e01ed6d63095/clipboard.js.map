{
  "version": 3,
  "sources": ["../src/clipboard.ts", "../src/assets/regexList.ts", "../src/util/linkReplacer.ts"],
  "sourcesContent": ["import { showHUD, Clipboard, showToast, Toast } from \"@raycast/api\";\nimport { linkReplacer } from \"./util/linkReplacer\";\n\nexport default async function main() {\n  try {\n    const text = await Clipboard.readText();\n\n    if (!text) {\n      showHUD(\"No text in clipboard\");\n      return;\n    }\n\n    const replacedString = linkReplacer(text);\n    if (!replacedString) return;\n\n    await Clipboard.copy(replacedString);\n    showHUD(\"Copied to clipboard\");\n  } catch (err) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Cannot transform text\",\n      message: String(err),\n    });\n  }\n}\n", "export const regexList = [\n  {\n    test: /https?:\\/\\/(?:twitter|x)\\.com(?=\\/\\w+?\\/status\\/)/g,\n    replace: \"https://fxtwitter.com\",\n    settingsKey: \"replaceTwitter\",\n  },\n  {\n    test: /https?:\\/\\/(?:www\\.|vm\\.)?tiktok\\.com/g,\n    replace: \"https://tiktxk.com\",\n    settingsKey: \"replaceTiktok\",\n  },\n  {\n    test: /https?:\\/\\/(?:www\\.)?instagram\\.com(?=\\/p\\/)/g,\n    replace: \"https://ddinstagram.com\",\n    settingsKey: \"replaceInstagram\",\n  },\n  {\n    test: /https?:\\/\\/(?:www\\.)?reddit\\.com(?=\\/r\\/\\w+?\\/comments\\/)/g,\n    replace: \"https://rxyddit.com\",\n    settingsKey: \"replaceReddit\",\n  },\n] as const;\n", "import { regexList } from \"../assets/regexList\";\nimport { getPreferenceValues, showHUD } from \"@raycast/api\";\n\ninterface Preferences {\n  enabled: boolean;\n  replaceTwitter: boolean;\n  replaceTiktok: boolean;\n  replaceInstagram: boolean;\n  replaceReddit: boolean;\n}\n\nexport const linkReplacer = (link: string) => {\n  const preferences = getPreferenceValues<Preferences>();\n\n  if (!preferences.enabled) {\n    showHUD(\"Extension is disabled\");\n    return;\n  }\n\n  let replacedString = link;\n\n  for (const item of regexList) {\n    if (!preferences[item.settingsKey]) continue;\n    replacedString = replacedString.replace(item.test, item.replace);\n  }\n\n  if (link === replacedString) {\n    showHUD(\"No text to transform\");\n    return;\n  }\n\n  return replacedString;\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAqD,wBCA9C,IAAMC,EAAY,CACvB,CACE,KAAM,qDACN,QAAS,wBACT,YAAa,gBACf,EACA,CACE,KAAM,yCACN,QAAS,qBACT,YAAa,eACf,EACA,CACE,KAAM,gDACN,QAAS,0BACT,YAAa,kBACf,EACA,CACE,KAAM,6DACN,QAAS,sBACT,YAAa,eACf,CACF,ECpBA,IAAAC,EAA6C,wBAUhCC,EAAgBC,GAAiB,CAC5C,IAAMC,KAAc,uBAAiC,EAErD,GAAI,CAACA,EAAY,QAAS,IACxB,WAAQ,uBAAuB,EAC/B,MACF,CAEA,IAAIC,EAAiBF,EAErB,QAAWG,KAAQC,EACZH,EAAYE,EAAK,WAAW,IACjCD,EAAiBA,EAAe,QAAQC,EAAK,KAAMA,EAAK,OAAO,GAGjE,GAAIH,IAASE,EAAgB,IAC3B,WAAQ,sBAAsB,EAC9B,MACF,CAEA,OAAOA,CACT,EF7BA,eAAOG,GAA8B,CACnC,GAAI,CACF,IAAMC,EAAO,MAAM,YAAU,SAAS,EAEtC,GAAI,CAACA,EAAM,IACT,WAAQ,sBAAsB,EAC9B,MACF,CAEA,IAAMC,EAAiBC,EAAaF,CAAI,EACxC,GAAI,CAACC,EAAgB,OAErB,MAAM,YAAU,KAAKA,CAAc,KACnC,WAAQ,qBAAqB,CAC/B,OAASE,EAAK,CACZ,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,wBACP,QAAS,OAAOA,CAAG,CACrB,CAAC,CACH,CACF",
  "names": ["clipboard_exports", "__export", "main", "__toCommonJS", "import_api", "regexList", "import_api", "linkReplacer", "link", "preferences", "replacedString", "item", "regexList", "main", "text", "replacedString", "linkReplacer", "err"]
}
